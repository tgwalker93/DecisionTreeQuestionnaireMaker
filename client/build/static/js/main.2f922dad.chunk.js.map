{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Form/Button.js","components/Form/TextArea.js","utils/API.js","pages/landing-page/landing-page.js","pages/create-questionnaire/create-questionnaire.js","pages/profile/profile.js","App.js","index.js"],"names":["Col","props","className","size","split","map","join","children","Container","id","fluid","Row","Input","formgroupclass","htmlFor","label","isvalid","fielderror","Button","TextArea","rows","axios","get","userObj","post","userData","questionData","organizationMongoID","console","log","mongoID","questionnaireData","LandingPage","formatInput","event","attribute","target","getAttribute","setState","value","trim","handleFormSubmit","preventDefault","emailAddressValid","firstNameValid","lastNameValid","passwordValid","formErrors","firstName","lastName","emailAddress","password","validateFields","handleLoginButtonClick","loginOrCreateAccountButtonClicked","loginButtonClicked","forgotPasswordButtonClicked","serverErrorMessage","handleCreateAccountButtonClick","handleForgotPasswordButtonClick","state","redirectTo","successMessage","e","this","nextProps","fieldValidationErrors","RegExp","test","length","_login","saveUser","sendForgotPasswordEmail","error","email","API","then","response","data","userId","username","user_email","to","pathname","onBlur","bind","toString","errorClass","onChange","handleChange","name","type","onClick","Component","withRouter","CreateQuestionnairePage","delta","count","saveNewQuestionInDB","questionObj","questionnaireMongoID","questionText","questionTextInModal","errorResponse","questionDoc","_id","newMongoID","currentQuestionIndex","isCompleted","showModal","push","forceUpdate","updateQuestionInDB","selectedQuestion","updateOrCreateQuestion","questionTextValid","isNewQuestion","newQuestionData","closeModal","currentQuestionCommentInModal","questionStatusInModal","questionUserAssignedInModal","questionDescription","createNewQuestionButton","currentModalTitle","handleLogoutButtonClick","window","location","reload","swapRenderCompletedQuestions","showCompletedQuestions","swapRenderActiveQuestions","showActiveQuestions","isLogin","currentCompletedQuestionIndex","showModal2","filteredCompletedQuestionData","filteredQuestionData","users","text","userFilter","statusFilter","questionnaireNameInTitle","formSubmitButtonText","userFirstName","userLastName","isCurrentQuestionCompleted","questinnaireMongoID","questions","questionArrayFromDB","questionnaireDoc","i","putAllQuestionsIntoFilteredArray","catch","err","questionClickedOn","questionMongoID","deletedQuestionDoc","deletedCount","index","indexOf","splice","adjustQuestionDataOrder","renderQuestionComments","deleteQuestionInDB","questionnaireName","getQuestionsFromDB","question","assigneeFilterIsActive","statusFilterIsActive","status","userAssigned","scope","key","variant","editQuestionButton","deleteQuestionButton","Modal","show","animation","Header","Title","Body","Footer","Profile","handleChangePasswordButtonClick","setPasswordFieldsActiveInModal","updatePasswordInDB","oldPassword","newPassword","newPassword1","newPassword1and2","questionnaireID","questionnaireIDValid","questionnaireNameValid","oldPasswordValid","newPassword1Valid","newPassword2Valid","questionnaireNameInModal","questionnaireIDInModal","newPassword2","handleCreateQuestionnaireButtonClick","setCreateQuestionnaireFieldsActiveInModal","setJoinQuestionnaireFieldsActiveInModal","setConfirmationBoxActiveInModal","handleJoinQuestionnaireButtonClick","handleSubmitButtonInModalClick","handleDeleteQuestionnaireInDB","currentQuestionnaire","loggedIn","setEditQuestionnaireFieldsActiveInModal","questionnaireMongoIDInModal","newPassword1And2Valid","questionnaires","getQuestionnairesOfUserInDB","attachUserToQuestionnaireInDB","saveQuestionnaireInDB","updateQuestionnaireInDB","questionnaireClickedOn","questionnaire","isUserQuestionnaireOwner","userWhoCreatedOrgMongoID","questionnaireObj","userMongoID","res","questionnaireUsers","handleEditQuestionnaireButtonClick","handleDeleteOrLeaveButtonClick","App","user","loggedInSuccess","exact","render","path","component","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2f922dad.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = props =>\n  <div className={props.size.split(\" \").map(size => \"col-\" + size).join(\" \")} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Container = props =>\n  <div id={props.id} className={`container${props.fluid === \"true\"  ? \"-fluid\" : \"\"}`} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n//({ fluid, children, props })\nexport const Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}> \n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Input = props =>\n  <div className={props.formgroupclass}>\n\n    <label htmlFor=\"inputField\">{props.label}</label>\n    <input className=\"form-control\" id=\"inputField\" {...props} />\n    {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\n  </div>;\n","import React from \"react\";\n\nexport const Button = props =>\n  <button {...props} className=\"btn btn-pill btn-light btn-lg\">\n    {props.children}\n  </button>;\n","import React from \"react\";\r\n\r\nexport const TextArea = props =>\r\n    <div className={props.formgroupclass}>\r\n        <label htmlFor=\"bugDescriptionField\">{props.label}</label>\r\n        <textarea className=\"form-control\" id=\"bugDescriptionField\" rows=\"5\" {...props}></textarea>\r\n        {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\r\n    </div>;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    // USER CALLS TO DB -----\r\n    user: function () {\r\n        return axios.get(\"/api/user\");\r\n    },\r\n    sendForgotPasswordEmail(userObj) {\r\n        return axios.post(\"/api/user/sendForgotPasswordEmail\", userObj);\r\n    },\r\n    updateUserInDB(userObj){\r\n        return axios.post(\"/api/user/updateUser\", userObj);\r\n    },\r\n    login: function (userData) {\r\n        return axios.post(\"/api/user/login\", userData)\r\n    },\r\n    saveUser: function (userData) {\r\n        return axios.post(\"/api/user/saveUser\", userData);\r\n    },\r\n\r\n    //QUESTION CALLS TO DB --------\r\n    saveQuestion: function (questionData) {\r\n        return axios.post(\"/api/question/saveQuestion\", questionData);\r\n    },\r\n    updateQuestion: function (questionData) {\r\n        return axios.post(\"/api/question/updateQuestion\", questionData);\r\n    },\r\n    deleteQuestion: function (questionData) {\r\n        return axios.post(\"/api/question/deleteQuestion\", questionData);\r\n    },\r\n    getAllQuestions: function (organizationMongoID) {\r\n        return axios.get(\"/api/question/getAllQuestions/\" + organizationMongoID);\r\n    },\r\n    \r\n\r\n\r\n    // questionnaire CALLS TO DB ------\r\n    saveQuestionnaireInDB: function(userData) {\r\n        return axios.post(\"/api/questionnaire/saveQuestionnaire\", userData);\r\n    },\r\n    getQuestionnairesOfUserInDB: function(userData){\r\n        console.log(\"i'm in API!!!\");\r\n        return axios.get(\"/api/questionnaire/getAllQuestionnairesOfUser/\" + userData.mongoID);\r\n    },\r\n    attachUserToQuestionnaireInDB: function (userData) {\r\n        return axios.post(\"/api/questionnaire/attachUserToQuestionnaire\", userData);\r\n    },\r\n    deleteQuestionnaireInDB: function(questionnaireData){\r\n        return axios.post(\"/api/questionnaire/deleteQuestionnaire\", questionnaireData);\r\n    },\r\n    updateQuestionnaireInDB: function(userData){\r\n        return axios.post(\"/api/questionnaire/updateQuestionnaire\", userData)\r\n    }\r\n\r\n};","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { withRouter } from 'react-router';\r\n\r\nimport \"./landing-page.css\";\r\nclass LandingPage extends Component {\r\n    constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        emailAddress: \"\",\r\n        password: \"\",\r\n        formErrors: {firstName: \"\", lastName: \"\", emailAddress:\"\", password:\"\"},\r\n          redirectTo: null,\r\n        firstNameValid: false,\r\n        lastNameValid: false,\r\n        passwordValid: false,\r\n        emailAddressValid: false,\r\n        loginOrCreateAccountButtonClicked: false,\r\n        loginButtonClicked: true,\r\n        forgotPasswordButtonClicked: false,\r\n        successMessage: \"\",\r\n        serverErrorMessage: \"\"\r\n    };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    } \r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ serverErrorMessage: this.props.serverErrorMessage });\r\n    }\r\n    //We use this method for validating all the fields.\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let emailAddressValid = this.state.emailAddressValid;\r\n        let firstNameValid = this.state.firstNameValid;\r\n        let lastNameValid = this.state.lastNameValid;\r\n        let passwordValid = this.state.passwordValid;\r\n\r\n        //Validating email using Regex\r\n        let regex = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\r\n         emailAddressValid = new RegExp(regex).test(this.state.emailAddress);\r\n        \r\n        fieldValidationErrors.emailAddress = emailAddressValid ? \"\" : \"Please provide a valid email\";\r\n\r\n        //Validating First Name by checking if there is anything there.\r\n        firstNameValid = this.state.firstName.length > 0;\r\n        fieldValidationErrors.firstName = firstNameValid ? \"\": \"Please provide your first name\";\r\n\r\n        //Validating Last Name by checking if there is anything there.\r\n        lastNameValid = this.state.lastName.length > 0;\r\n        fieldValidationErrors.lastName = lastNameValid ? \"\":\"Please provide your last name\";\r\n\r\n\r\n        if (!this.state.loginButtonClicked)\r\n        {\r\n        //validating password\r\n        passwordValid = this.state.password.length >= 6;\r\n        fieldValidationErrors.password = passwordValid ? \"\" : \"Please provide a password of atleast 8 characters\";\r\n        }\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            emailAddressValid: emailAddressValid,\r\n            firstNameValid: firstNameValid,\r\n            lastNameValid: lastNameValid,\r\n            passwordValid: passwordValid\r\n        }, () => {\r\n            if(this.state.loginButtonClicked && emailAddressValid){\r\n                //If the login button is clicked then we want submit LOGIN request, which is different than Create Account request\r\n                this.props._login(this.state.emailAddress, this.state.password);\r\n\r\n            }else if(this.state.loginOrCreateAccountButtonClicked && !this.state.loginButtonClicked && emailAddressValid && firstNameValid && lastNameValid && passwordValid){\r\n                //If Create Account button was clicked, then we want to post the user to the database.\r\n                this.saveUser();\r\n            }else if(this.state.forgotPasswordButtonClicked){\r\n                //If forgot password button was clicked.\r\n                this.sendForgotPasswordEmail();\r\n            }\r\n        });    \r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Below are all the button click methods - Just to set it up so before I actually submit data to DB ----------------------------------\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\" }\r\n        }, () => {\r\n                this.validateFields();\r\n        });\r\n\r\n    };\r\n\r\n    handleLoginButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: true, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }\r\n        })\r\n        \r\n    }\r\n    handleCreateAccountButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: false, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }        \r\n        })\r\n    }\r\n\r\n    handleForgotPasswordButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: false, loginButtonClicked: false, forgotPasswordButtonClicked: true,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n                        formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage:\"\" }       \r\n        })\r\n    }\r\n    // END of BUTTON CLICK METHODS\r\n\r\n    //Handle the call to the DB for forgot password\r\n    sendForgotPasswordEmail() {\r\n        let userObj = {\r\n            email: this.state.emailAddress\r\n        }\r\n\r\n        API.sendForgotPasswordEmail(userObj)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    this.setState({ serverErrorMessage: \"An email has been sent.\"});\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error })\r\n                }\r\n            })\r\n    }\r\n\r\n    //Method when user wants to create account\r\n    saveUser() {\r\n            let userObj = {\r\n                userId: null,\r\n                username: this.state.emailAddress,\r\n                password: this.state.password,\r\n                email: this.state.emailAddress,\r\n                user_email: this.state.email,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName\r\n            }\r\n            API.saveUser(userObj)\r\n                .then(response => {\r\n\r\n\r\n\r\n                    if (!response.data.error) {\r\n                        //Now that the user account is created, let's automatically login the user in\r\n                         this.props._login(this.state.emailAddress, this.state.password, userObj);\r\n\r\n        \r\n                    } else {\r\n                        //Usually this happens when an email address was already used.\r\n                        this.setState({ serverErrorMessage: response.data.error })\r\n                    }\r\n                })\r\n\r\n    }\r\n    render() {\r\n\r\n        if (this.props.redirectTo) {\r\n            return <Redirect to={{ pathname: this.props.redirectTo }} />\r\n        } else {\r\n        return (\r\n            <Container id=\"container\" fluid=\"true\">\r\n\r\n                <Row id=\"mainRow\">\r\n\r\n                    <hr id=\"hline\"></hr>\r\n                    <Col id=\"formCol\" size=\"sm-6\">\r\n                        <h1 id=\"loginTitle\">Decision Tree Questionnaire Maker</h1>\r\n                        {this.state.loginOrCreateAccountButtonClicked ?\r\n                            <div>\r\n                                {this.state.loginButtonClicked ?\r\n                                    <h3 id=\"formHeader\">Login</h3>\r\n                                    :\r\n                                    <h3 id=\"formHeader\">Create Account</h3>\r\n\r\n                                }\r\n                                <form>\r\n                                    \r\n\r\n                                    {this.state.loginButtonClicked ?\r\n\r\n                                        \"\"\r\n                                        :\r\n\r\n                                        <div>\r\n                                           \r\n                                            <Input label=\"First Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.firstNameValid.toString()} fielderror={this.state.formErrors.firstName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.firstName)}`} value={this.state.firstName} id=\"firstName\" onChange={this.handleChange.bind(this)} name=\"firstName\"></Input>\r\n\r\n\r\n                                    \r\n                                            <Input label=\"Last Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.lastNameValid.toString()} fielderror={this.state.formErrors.lastName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.lastName)}`} value={this.state.lastName} id=\"lastName\" onChange={this.handleChange.bind(this)} name=\"lastName\"></Input>\r\n\r\n                                        </div>\r\n\r\n                                    }\r\n\r\n                               \r\n                                    <Input label=\"Email Address\" onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n\r\n                              \r\n                                    <Input label=\"Password\" type=\"password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.passwordValid.toString()} fielderror={this.state.formErrors.password} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.password)}`} value={this.state.password} id=\"password\" onChange={this.handleChange.bind(this)} name=\"password\"></Input>\r\n\r\n                                    <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n\r\n                                    {this.state.loginButtonClicked ?\r\n                                        <div>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" \r\n                                            onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n\r\n                                    }\r\n                                </form>\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                                <br />\r\n                            </div>\r\n                            : \r\n\r\n                            <div>\r\n\r\n                                {\r\n                                    this.state.forgotPasswordButtonClicked ?\r\n                                        <div>\r\n\r\n                                            <p><strong>Please enter your email address. If correct, we will send you an email!</strong></p>\r\n                                            <p>Email Address</p>\r\n                                            <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n                                            <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n                                            \r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                        </div>\r\n                                            :                                                                                \r\n                                             <div>                                \r\n                                            <Button onClick={this.handleLoginButtonClick.bind(this)}> Login </Button>\r\n                                            <Button onClick={this.handleCreateAccountButtonClick.bind(this)}> Create Account </Button>\r\n                                            <Button onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</Button>      \r\n                                            </div>\r\n\r\n\r\n                                }\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n\r\n                            </div>\r\n                              \r\n                        }\r\n                        \r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n                }\r\n    \r\n            }\r\n}\r\n\r\n// export default LandingPage;\r\nexport default withRouter(LandingPage)\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\n// import \"./create-questionnaire.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass CreateQuestionnairePage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formErrors: { questionText: \"\" },\r\n            questionTextValid: false,\r\n            isLogin: true,\r\n            isNewQuestion: false,\r\n            selectedQuestion: \"\",\r\n            currentModalTitle: \"Edit Question\",\r\n            currentQuestionIndex: 0,\r\n            currentCompletedQuestionIndex: 0,\r\n            showModal: false,\r\n            showModal2: false,\r\n            questionData: [],\r\n            filteredCompletedQuestionData: [],\r\n            filteredQuestionData: [],\r\n            users: [{ text: 'Tyler', id: '1' }, { text: 'Tawny', id: '2' }, { text: 'Anthony', id: '3' }, { text: 'Arthur', id: '4' }],\r\n            currentQuestionCommentInModal: \"\",\r\n            questionTextInModal: \"\",\r\n            questionStatusInModal: \"\",\r\n            questionUserAssignedInModal: \"\",\r\n            userFilter: \"\",\r\n            statusFilter: \"\",\r\n            questionnaireMongoID: \"\",\r\n            questionnaireNameInTitle: \"\",\r\n            formSubmitButtonText: \"Submit\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            showActiveQuestions: true,\r\n            showCompletedQuestions: false,\r\n            isCurrentQuestionCompleted: false\r\n        };\r\n\r\n    }\r\n\r\n    delta = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n    //This method will handle all the form validation\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let questionTextValid = this.state.questionTextValid;\r\n\r\n\r\n        questionTextValid = this.state.questionTextInModal.length > 0;\r\n        fieldValidationErrors.questionText = questionTextValid ? \"\" : \"Please add Question Text.\";\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            questionTextValid: questionTextValid\r\n        }, () => {\r\n            this.updateOrCreateQuestion();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n\r\n    //************************** DB METHODS ************** THESE METHODS SAVE, EDIT, GET BUGS FROM DB *******************************************\r\n    saveNewQuestionInDB = () => {\r\n        var questionObj = {\r\n            questionnaireMongoID: this.state.questionnaireMongoID,\r\n            questionText: this.state.questionTextInModal,\r\n        }\r\n\r\n        API.saveQuestion(questionObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    questionObj.mongoID = response.data.questionDoc._id;\r\n                    questionObj.newMongoID = response.data.questionDoc._id;\r\n                    questionObj.id = this.state.currentQuestionIndex;\r\n                    questionObj.isCompleted = response.data.isCompleted;\r\n\r\n                    this.setState({ showModal: false });\r\n                    this.state.questionData.push(questionObj);\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n    updateQuestionInDB = () => {\r\n        API.updateQuestion(this.state.selectedQuestion)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    this.setState({ showModal: false });\r\n\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    getQuestionsFromDB() {\r\n        console.log(\"I'm in getQuestions from DB  --- \" + this.state.questinnaireMongoID);\r\n        API.getAllQuestions(this.state.questionnaireMongoID)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    var questions = [];\r\n                    var questionArrayFromDB = response.data.questionnaireDoc.questions;\r\n                    //Loop through question data received from the server.\r\n                    for (var i = 0; i < questionArrayFromDB.length; i++) {\r\n                        questions.push({\r\n                            mongoID: questionArrayFromDB[i]._id,\r\n                            id: this.state.currentQuestionIndex,\r\n                            questionText: questionArrayFromDB[i].questionText,\r\n                        })\r\n\r\n                        this.setState({ currentQuestionIndex: this.state.currentQuestionIndex + 1 });\r\n\r\n                    }\r\n\r\n                    this.setState({ questionData: questions });\r\n                    this.forceUpdate();\r\n\r\n                    //At default, we want to show all questions in the table\r\n                    this.putAllQuestionsIntoFilteredArray();\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    deleteQuestionInDB(questionClickedOn) {\r\n        questionClickedOn.questionMongoID = questionClickedOn.mongoID;\r\n        questionClickedOn.questionnaireMongoID = this.state.questionnaireMongoID;\r\n        API.deleteQuestion(questionClickedOn)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    if (response.data.deletedQuestionDoc.deletedCount > 0) {\r\n                        //Removing the question from the UI\r\n                        const index = this.state.questionData.indexOf(questionClickedOn);\r\n                        if (index > -1) {\r\n                            this.state.questionData.splice(index, 1);\r\n                        }\r\n                        this.adjustQuestionDataOrder();\r\n                    }\r\n\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updateOrCreateQuestion = () => {\r\n        if (!this.state.questionTextValid) {\r\n            return;\r\n        }\r\n        if (this.state.isNewQuestion) {\r\n            this.saveNewQuestionInDB();\r\n        } else {\r\n            var newQuestionData = this.state.questionData;\r\n            //UPDATE THE BUG DATA LOCALLY BEFORE PUSHING TO DB\r\n            newQuestionData[this.state.currentQuestionIndex].questionText = this.state.questionTextInModal;\r\n\r\n            this.setState({ selectedQuestion: this.state.questionData[this.state.currentQuestionIndex], questionData: newQuestionData });\r\n            this.updateQuestionInDB();\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        this.setState({\r\n            showModal: false, questionTextInModal: \"\", currentQuestionCommentInModal: \"\",\r\n            questionStatusInModal: \"\", questionUserAssignedInModal: \"\", formErrors: { questionDescription: \"\" }\r\n        });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n\r\n    // ******************** THESE METHODS ARE CALLED WHEN CREATE/EDIT BUTTONS ARE FIRST CLICKED ******************\r\n    editQuestionButton(questionClickedOn) {\r\n        this.adjustQuestionDataOrder()\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Edit Question\",\r\n            currentQuestionIndex: questionClickedOn.id,\r\n            questionTextInModal: questionClickedOn.questionText,\r\n            isNewQuestion: false,\r\n            selectedQuestion: questionClickedOn\r\n        });\r\n        this.renderQuestionComments(questionClickedOn);\r\n    }\r\n    deleteQuestionButton(questionClickedOn) {\r\n        this.deleteQuestionInDB(questionClickedOn);\r\n    }\r\n\r\n    createNewQuestionButton = () => {\r\n        this.setState({ showModal: true, currentModalTitle: \"Create Question\", isNewQuestion: true, questionTextInModal: \"\"});\r\n    }\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    // ******************** END OF INITIAL BUTTON CLICK METHODS ******************\r\n\r\n\r\n\r\n    //CALLS THIS WHEN THE COMPONENT MOUNTS, basically \"on page load\"\r\n    componentDidMount() {\r\n        // var questionnaireUsersArray = [];\r\n        // for (var i = 0; i < this.props.location.state.questionnaireUsers.length; i++) {\r\n        //     questionnaireUsersArray.push(\r\n        //         {\r\n        //             text: this.props.location.state.questionnaireUsers[i],\r\n        //             id: i\r\n        //         }\r\n        //     )\r\n        // }\r\n        //Grab props that were set from profile page and set them to state for easier access.\r\n        this.setState({\r\n            questionnaireMongoID: this.props.location.state.questionnaireMongoID, questionnaireNameInTitle: this.props.location.state.questionnaireName,\r\n            userFirstName: this.props.location.state.userFirstName, userLastName: this.props.location.state.userLastName\r\n        }, () => {\r\n             this.getQuestionsFromDB();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    putAllQuestionsIntoFilteredArray() {\r\n        this.setState({ filteredQuestionData: [] });\r\n        this.state.questionData.map(question => {\r\n            return this.state.filteredQuestionData.push(question);\r\n        });\r\n    }\r\n    adjustQuestionDataOrder() {\r\n        //Update the current page's id of the question for UI purposes\r\n        for (var i = 0; i < this.state.questionData.length; i++) {\r\n            this.state.questionData[i].id = i;\r\n        }\r\n    }\r\n\r\n    //If you click \"Show Completed Questions\" or \"Hide Completed Questions\", this will show or hide.\r\n    swapRenderCompletedQuestions = () => {\r\n        if (this.state.showCompletedQuestions) {\r\n            this.setState({ showCompletedQuestions: false })\r\n        } else {\r\n            this.setState({ showCompletedQuestions: true })\r\n        }\r\n\r\n    }\r\n    //If you click \"Show Active Questions\" or \"Hide Active Questions\", this will show or hide.\r\n    swapRenderActiveQuestions = () => {\r\n        if (this.state.showActiveQuestions) {\r\n            this.setState({ showActiveQuestions: false })\r\n        } else {\r\n            this.setState({ showActiveQuestions: true })\r\n        }\r\n    }\r\n\r\n    //Flip the value of \"isCompleted\" for the question\r\n    completedCheck(question) {\r\n        if (question.isCompleted) {\r\n            question.isCompleted = false;\r\n        } else {\r\n            question.isCompleted = true;\r\n        }\r\n\r\n        this.setState({ selectedQuestion: question }, () => {\r\n            this.updateQuestionInDB();\r\n            this.forceUpdate();\r\n        });\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n\r\n        //FIRST WE FILTER THE NON COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\") {\r\n            this.state.filteredQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n\r\n                var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n                if (this.state.statusFilter === question.status && this.state.statusFilter !== \"\") {\r\n\r\n                    statusFilterIsActive = true;\r\n                }\r\n                if (this.state.userFilter === question.userAssigned && this.state.userFilter !== \"\") {\r\n                    assigneeFilterIsActive = true;\r\n                }\r\n                if (statusFilterIsActive && assigneeFilterIsActive && !question.isCompleted) {\r\n                    return this.state.filteredQuestionData.push(question);\r\n                } else if (statusFilterIsActive && this.state.userFilter === \"\" && !question.isCompleted) {\r\n\r\n                    return this.state.filteredQuestionData.push(question);\r\n                }\r\n                else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && !question.isCompleted) {\r\n                    return this.state.filteredQuestionData.push(question);\r\n                }\r\n            });\r\n        } else {\r\n            this.state.filteredQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n                if (!question.isCompleted) {\r\n                    return this.state.filteredQuestionData.push(question);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        // NOW WE WILL DO THE SAME LOGIC FOR COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\") {\r\n            this.state.filteredCompletedQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n\r\n                var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n                if (this.state.statusFilter === question.status && this.state.statusFilter !== \"\") {\r\n\r\n                    statusFilterIsActive = true;\r\n                }\r\n                if (this.state.userFilter === question.userAssigned && this.state.userFilter !== \"\") {\r\n                    assigneeFilterIsActive = true;\r\n                }\r\n                if (statusFilterIsActive && assigneeFilterIsActive && question.isCompleted) {\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                } else if (statusFilterIsActive && this.state.userFilter === \"\" && question.isCompleted) {\r\n\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                }\r\n                else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && question.isCompleted) {\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                }\r\n            });\r\n        } else {\r\n            this.state.filteredCompletedQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n                if (question.isCompleted) {\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        return (\r\n            <Container id=\"containerViewQuestions\" fluid=\"true\">\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 QuestiontrackerTitle\" id=\"questionnaireTitle\">{this.state.questionnaireNameInTitle}</h1>\r\n                                <h2 className=\"display-4 QuestionTrackerTitle\">Edit Questions</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <Row>\r\n                            <Col size=\"sm-2\">\r\n                                <Link to=\"/profile\" className=\"log\" ><Button>View Profile</Button></Link>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                <Button type=\"button\" className=\"btn btn-primary\" onClick={this.createNewQuestionButton}>Create New Question</Button>\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        {this.state.showActiveQuestions ?\r\n                            <div>\r\n                                <h1 className=\"activeQuestionsTitle\">Active Questions</h1>\r\n                                {this.state.questionData.length ? (\r\n                                    <table id=\"questionViewTable_Table\" className=\"table table-hover questionViewTable_Table\">\r\n                                        <thead id=\"questionViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\">Question</th>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\"></th>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\"></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredQuestionData.map(question => {\r\n                                                return (\r\n                                                    <tr className=\"questionViewTable_tr\" key={question.mongoID}>\r\n                                                        <td id=\"titleColumn\" className=\"questionViewTable_td\">{question.questionText}</td>\r\n                                                        <td id=\"editColumn\" className=\"questionViewTable_td\">\r\n                                                            <Button variant=\"primary\" onClick={() => this.editQuestionButton(question)}>\r\n                                                                Edit\r\n                                                                        </Button>\r\n                                                        </td>\r\n                                                        <td id=\"deleteColumn\" className=\"questionViewTable_td\"> <Button variant=\"primary\" onClick={() => this.deleteQuestionButton(question)}>Delete</Button></td>\r\n                                                    </tr>\r\n                                                )\r\n\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)}\r\n                            </div>\r\n\r\n\r\n\r\n                            :\r\n\r\n\r\n                            \"\"\r\n                        }\r\n\r\n\r\n                        <br />\r\n                        <br />\r\n\r\n\r\n\r\n\r\n                        {/* This modal will pop up for editing questions! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Button className='btn btn-danger note-delete xButton' id=\"questionModalXButton\" onClick={() => this.closeModal()}>X</Button>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <br />\r\n\r\n                                <TextArea label=\"Description\" onBlur={this.formatInput.bind(this)} value={this.state.questionTextInModal} id=\"questionTextInModal\" onChange={this.handleChange.bind(this)} name=\"questionTextInModal\" />\r\n\r\n\r\n\r\n\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"primary\" onClick={this.handleFormSubmit}>\r\n                                    Submit\r\n                              </Button>\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateQuestionnairePage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport \"./profile.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from 'react-router';\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName:\"\",\r\n            loggedIn: this.props.loggedIn,\r\n            redirectTo: null,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            setEditQuestionnaireFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            formErrors: { oldPassword: \"\", newPassword1and2:\"\", questionnaireName:\"\", questionnaireID:\"\" },\r\n            oldPassword: \"\",\r\n            newPassword1: \"\",\r\n            newPassword2: \"\",\r\n            questionnaireNameInModal: \"\",\r\n            questionnaireIDInModal: \"\",\r\n            questionnaireMongoIDInModal: \"\",\r\n            oldPasswordValid: true,\r\n            newPassword1And2Valid: false,\r\n            questionnaireNameValid: false,\r\n            questionnaireIDValid: false,\r\n            showModal: false,\r\n            formSubmitButtonText: \"Submit\",\r\n            successMessage: \"\",\r\n            serverErrorMessage:\"\",\r\n            currentModalTitle: \"\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            userData: [],\r\n            questionnaires: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ userFirstName: this.props.firstName, userLastName: this.props.lastName});\r\n        this.getQuestionnairesOfUserInDB();\r\n        \r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Standard method for constantly updating input, since UI is constantly refreshing\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let newPassword1And2Valid = this.state.newPassword1And2Valid;\r\n        let questionnaireNameValid =  this.state.questionnaireNameValid;\r\n        let questionnaireIDValid = this.state.questionnaireIDValid;\r\n\r\n        //Validating between the new password field and \"confirm password\" field that they match and are greather than or equal to 6 characters\r\n        newPassword1And2Valid = (this.state.newPassword1 === this.state.newPassword2) && this.state.newPassword1.length >= 6;\r\n        fieldValidationErrors.newPassword1and2 = \"New password doesn't match or your password is less than 8 characters long.\";\r\n\r\n        //Validating that questionnaire is greater than 3 characters\r\n        questionnaireNameValid = this.state.questionnaireNameInModal.length >= 3;\r\n        fieldValidationErrors.questionnaireName = \"Questionnaire Name must have atleast three characters.\";\r\n\r\n        //Validating that questionnaire ID is greater than 6 characters\r\n        questionnaireIDValid = this.state.questionnaireIDInModal.length >= 6;\r\n        fieldValidationErrors.questionnaireID = \"Questionnaire ID must have atleast six characters.\";\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            newPassword1And2Valid: newPassword1And2Valid,\r\n            questionnaireIDValid: questionnaireIDValid,\r\n            questionnaireNameValid: questionnaireNameValid\r\n        }, () => {\r\n                if (this.state.setJoinQuestionnaireFieldsActiveInModal) {\r\n                    //for JOIN questionnaire\r\n                    if (questionnaireIDValid){\r\n                     this.attachUserToQuestionnaireInDB();\r\n                    }\r\n                } else if (this.state.setCreateQuestionnaireFieldsActiveInModal) {\r\n                    //For CREATE questionnaire\r\n                    if(questionnaireNameValid && questionnaireIDValid){\r\n                        this.saveQuestionnaireInDB();\r\n                    }\r\n                } else if (this.state.setEditQuestionnaireFieldsActiveInModal) {\r\n                    //For UPDATE Questionnaire\r\n                    if(questionnaireNameValid && questionnaireIDValid){\r\n\r\n                        this.updateQuestionnaireInDB();\r\n                    }\r\n                } else if (this.state.setPasswordFieldsActiveInModal) {\r\n                    //For UPDATE password\r\n                    if (newPassword1And2Valid){     \r\n                        this.updatePasswordInDB();\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    \r\n    handleChangePasswordButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Change Password\",\r\n            setPasswordFieldsActiveInModal: true\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updatePasswordInDB = () => {\r\n\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n        API.updateUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.setState({ successMessage: \"Successfully updated password.\"})\r\n                    this.closeModal();\r\n\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error, formErrors: { oldPassword: \"\", newPassword1and2: \"\", questionnaireName: \"\", questionnaireID: \"\", serverErrorMessage: \"\" }})\r\n                }\r\n            })\r\n        \r\n    }\r\n    closeModal = () => {\r\n        //Reset all the fields so they don't show up again when you try to open the modal again.\r\n        this.setState({ showModal: false, questionnaireIDValid: true,\r\n        questionnaireNameValid: true, oldPasswordValid: true, newPassword1Valid: true, newPassword2Valid: true,\r\n            questionnaireNameInModal: \"\", questionnaireIDInModal: \"\", oldPassword: \"\", newPassword: \"\", newPassword2: \"\", serverErrorMessage:\"\",\r\n            formErrors: { oldPassword: \"\", newPassword1and2: \"\", questionnaireName: \"\", questionnaireID: \"\", serverErrorMessage: \"\", formSubmitButtonText: \"Submit\" } });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n    //*************************METHODS BELOW RELATED TO ORGANIZATION BUTTON CLICKS ******************/\r\n    handleEditQuestionnaireButtonClick(questionnaireClickedOn) {\r\n        //event.preventDefault();\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Edit Questionnaire\",\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setEditQuestionnaireFieldsActiveInModal: true,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            questionnaireMongoIDInModal: questionnaireClickedOn._id,\r\n            questionnaireNameInModal: questionnaireClickedOn.name,\r\n            questionnaireIDInModal: questionnaireClickedOn.questionnaireID\r\n        });\r\n    }\r\n\r\n    handleCreateQuestionnaireButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Create Questionnaire\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: true,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            questionnaireIDInModal: \"\",\r\n            questionnaireNameInModal: \"\"\r\n        });\r\n\r\n    }\r\n\r\n    handleJoinQuestionnaireButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Join Questionnaire\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            setJoinQuestionnaireFieldsActiveInModal: true\r\n        })\r\n\r\n    }\r\n    handleDeleteOrLeaveButtonClick(questionnaire) {\r\n        this.setState({ setConfirmationBoxActiveInModal: true, showModal: true, currentQuestionnaire: questionnaire,\r\n            currentModalTitle: \"\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            formSubmitButtonText: \"Confirm\",\r\n            successMessage: \"\",\r\n            questionnaireIDInModal: \"\",\r\n            questionnaireNameInModal: \"\"    \r\n        });\r\n    }\r\n\r\n    //*** METHODS BELOW RELATED TO DB WITH ORGANIZATIONS */ */\r\n    saveQuestionnaireInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            questionnaireName: this.state.questionnaireNameInModal,\r\n            questionnaireID: this.state.questionnaireIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.saveQuestionnaireInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getQuestionnairesOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({serverErrorMessage: response.data.error})\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    getQuestionnairesOfUserInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n\r\n        API.getQuestionnairesOfUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of questionnaires. Update state with questionnaires.\r\n                    console.log(\"I got questionnaires back from DB!\");\r\n                    console.log(response);\r\n                    this.setState({\r\n                        questionnaires: response.data.questionnaires,\r\n                    })\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    attachUserToQuestionnaireInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            questionnaireID: this.state.questionnaireIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n        API.attachUserToQuestionnaireInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of questionnaires. Update state with questionnaires.\r\n                    this.setState({\r\n                        questionnaires: response.data.questionnaires,\r\n                        successMessage: \"You successfully joined the questionnaire!\"\r\n                    })\r\n                    this.closeModal();\r\n                    this.getQuestionnairesOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({ serverErrorMessage: response.data.error });\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleDeleteQuestionnaireInDB(questionnaireClickedOn) {\r\n        var isUserQuestionnaireOwner = false;\r\n        if (this.props.mongoID === questionnaireClickedOn.userWhoCreatedOrgMongoID){\r\n            isUserQuestionnaireOwner = true;\r\n        }\r\n        var questionnaireObj = {\r\n            questionnaireMongoID: questionnaireClickedOn._id,\r\n            userMongoID: this.props.mongoID,\r\n            questionnaireData: questionnaireClickedOn,\r\n            isUserQuestionnaireOwner: isUserQuestionnaireOwner,\r\n            userFirstName: this.state.userFirstName,\r\n            userLastName: this.state.userLastName\r\n        }\r\n        API.deleteQuestionnaireInDB(questionnaireObj)\r\n            .then(res => {\r\n                this.setState({currentQuestionnaire: \"\"});\r\n                this.getQuestionnairesOfUserInDB();\r\n                this.forceUpdate();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    updateQuestionnaireInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            questionnaireMongoID: this.state.questionnaireMongoIDInModal,\r\n            questionnaireName: this.state.questionnaireNameInModal,\r\n            questionnaireID: this.state.questionnaireIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.updateQuestionnaireInDB(userObj)\r\n            .then(response => {\r\n                //If not error from server\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getQuestionnairesOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleSubmitButtonInModalClick = () => {\r\n        if(this.state.setConfirmationBoxActiveInModal){\r\n            //In this case we are confirming to delete or leave an questionnaire.\r\n            this.setState({setConfirmationBoxActiveInModal: false, showModal: false}, () => {\r\n                    this.handleDeleteQuestionnaireInDB(this.state.currentQuestionnaire);\r\n            }\r\n            )\r\n        }else {\r\n            this.validateFields();\r\n        }\r\n    }\r\n\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <Container id=\"containerViewQuestions\" fluid=\"true\">\r\n\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 QuestionTrackerTitle\">Welcome, {this.props.firstName}!</h1>\r\n                                <h2 className=\"display-4 QuestionTrackerTitle\" id=\"successMessage\">{this.state.successMessage}</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <Button onClick={this.handleChangePasswordButtonClick.bind(this)}>Change Password</Button>\r\n                        <Button onClick={this.handleCreateQuestionnaireButtonClick.bind(this)}>Create Questionnaire</Button>\r\n                        <Button onClick={this.handleJoinQuestionnaireButtonClick.bind(this)}>Answer Questionnaire</Button>\r\n                        <br />\r\n                        <br />\r\n                        {this.state.questionnaires.length > 0 ? (\r\n                            <table id=\"questionnaireTable_Table\" className=\"table table-hover questionViewTable_Table\">\r\n                                <thead id=\"questionnaireTable_head\" className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\">Name</th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\">Questionnaire ID</th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.questionnaires.map(questionnaire => {\r\n                                        return (\r\n                                            <tr className=\"questionnaireTable_tr\" key={questionnaire._id}>\r\n                                                <td id=\"questionnaireNameColumn\" className=\"questionnaireTable_td\">{questionnaire.name}</td>\r\n                                                <td id=\"questionnaireIDColumn\" className=\"questionnaireTable_td\">{questionnaire.questionnaireID}</td>\r\n                                                <td id=\"viewQuestionColumn\" className=\"questionnaireTable_td\">\r\n                                                    \r\n                                                    <Link to={{pathname: \"/create-questionnaire\", state: {questionnaireMongoID: questionnaire._id, questionnaireName: questionnaire.name, questionnaireUsers: questionnaire.users, userFirstName: this.state.userFirstName, userLastName: this.state.userLastName}}} className=\"log\" ><Button>Edit Questions</Button></Link>\r\n                                                    </td>\r\n                                                <td id=\"editColumn\" className=\"questionnaireTable_td\">\r\n                                                    {this.props.mongoID === questionnaire.userWhoCreatedOrgMongoID ?\r\n                                                        <Button variant=\"primary\" onClick={() => this.handleEditQuestionnaireButtonClick(questionnaire)}>\r\n                                                            Edit Questionnaire\r\n                                                        </Button> : \"\"\r\n\r\n                                                    }\r\n                                                </td>\r\n                                                <td id=\"deleteColumn\" className=\"questionnaireTable_td\">\r\n                                                    {this.props.mongoID === questionnaire.userWhoCreatedOrgMongoID ?\r\n\r\n                                                        < Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(questionnaire)}>Delete</Button> \r\n                                                        : \r\n                                                        <Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(questionnaire)}>Leave</Button> \r\n                                                    }\r\n                                                     </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n\r\n                        ) : (<h3 id=\"noResultsHeader\"> No Results to Display </h3>)}\r\n                        <br />\r\n                        <br />\r\n\r\n                        {/* This modal will pop up for changing password! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                {this.state.setConfirmationBoxActiveInModal ?\r\n                                    <h1 id=\"confirmationHeader\">Are you sure?</h1>   \r\n                                :\r\n                                    <div>\r\n                                        {this.state.setPasswordFieldsActiveInModal ?\r\n                                            <div>\r\n                                                <Input type=\"password\" label=\"Old Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.oldPasswordValid.toString()}\r\n                                                    fielderror={this.state.formErrors.oldPassword}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.oldPassword)}`}\r\n                                                    value={this.state.oldPassword}\r\n                                                    id=\"oldPassword\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"oldPassword\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"New Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword1and2}\r\n                                                    id=\"newPassword1\" onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword1\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"Confirm New Password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword2}\r\n                                                    id=\"newPassword2\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword2\"></Input>\r\n\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                {this.state.setJoinQuestionnaireFieldsActiveInModal ?\r\n                                                    <div>\r\n                                                        <Input label=\"Please enter the Questionnaire ID of the questionnaire you wish to join:\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.questionnaireIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.questionnaireID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.questionnaireID)}`}\r\n                                                            value={this.state.questionnaireIDInModal}\r\n                                                            id=\"questionnaireIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"questionnaireIDInModal\"></Input>\r\n\r\n                                                    </div>\r\n                                                    :\r\n                                                    <div>\r\n                                                        <Input label=\"Questionnaire Name\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.questionnaireNameValid.toString()}\r\n                                                            fielderror={this.state.formErrors.questionnaireName}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.questionnaireName)}`}\r\n                                                            value={this.state.questionnaireNameInModal}\r\n                                                            id=\"questionnaireNameInModal\"\r\n                                                            onChange={this.handleChange.bind(this)}\r\n                                                            name=\"questionnaireNameInModal\"></Input>\r\n\r\n                                                        <Input label=\"Questionnaire ID (Use this ID to invite people)\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.questionnaireIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.questionnaireID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.questionnaireID)}`}\r\n                                                            value={this.state.questionnaireIDInModal}\r\n                                                            id=\"questionnaireIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"questionnaireIDInModal\"></Input>\r\n                                                    </div>\r\n\r\n                                                }\r\n\r\n                                            </div>\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                }\r\n                        \r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                                    Cancel\r\n                                  </Button>\r\n                                <Button variant=\"primary\" onClick={this.handleSubmitButtonInModalClick.bind(this)}>\r\n                                {this.state.formSubmitButtonText}\r\n                                </Button>\r\n\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n    \r\n}\r\n}\r\n\r\n// export default Profile;\r\nexport default withRouter(Profile);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"./pages/landing-page\";\nimport CreateQuestionnairePage from \"./pages/create-questionnaire\";\nimport Profile from \"./pages/profile\";\nimport API from \"./utils/API\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      loggedIn: false,\n      user: null,\n      userId: null,\n      firstName: null,\n      lastName: null,\n      mongoID: null,\n      password: null,\n      redirectTo: null,\n      serverErrorMessage: \"\"\n    }\n    this._login = this._login.bind(this)\n  }\n  componentDidMount() {\n    API.user().then(response => {\n      if (!!response.data.user) {\n        this.setState({\n          loggedIn: true,\n          userId: response.data.user._id,\n        });\n      } else {\n        this.setState({\n          loggedIn: false,\n          // redirectTo: \"/landing-page\",\n          user: null\n        })\n      }\n    })\n  }\n\n  _login(username, password) {\n    var userData = {\n      username: username,\n      password: password,\n    }\n    API\n      .login(userData)\n      .then(response => {\n        if (response.status === 200) {\n          if (response.data.loggedInSuccess) {\n            // update the state\n            this.setState({\n              loggedIn: true,\n              // user: response.data.user,\n              // userId: response.data.user._id,\n              username: response.data.username,\n              mongoID: response.data.mongoID,\n              firstName: response.data.firstName,\n              lastName: response.data.lastName,\n              password: response.data.password,\n              redirectTo: \"/profile\"\n            })\n            //this.props.history.push(\"/profile\");\n\n\n          } else {\n            this.setState({\n              loggedIn: false,\n              serverErrorMessage: response.data.error\n            }, () => {\n              this.forceUpdate();\n            })\n\n          }\n        }\n      })\n  }\n\n  render() {\n    //IF USER IS AUTHENTICATED RENDER THIS\n    if (this.state.loggedIn) {\n      return (\n\n        <div className=\"App\">\n          <div>\n\n            <Redirect exact to={{ pathname: this.state.redirectTo }} render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n\n            <Route exact path=\"/landing-page\"\n              render={() =>\n                <LandingPage\n                  _login={this._login}\n                  serverErrorMessage={this.state.serverErrorMessage}\n                />} />\n            <Route exact path=\"/create-questionnaire\" component={CreateQuestionnairePage} />\n            <Route exact path=\"/profile\" render={() => <Profile loggedIn={this.state.loggedIn} username={this.state.username} mongoID={this.state.mongoID} firstName={this.state.firstName} lastName={this.state.lastName} />} />\n\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/landing-page\" />\n            )} />\n\n          </div>\n        </div>\n\n      )\n    }\n\n\n    //IF USER IS NOT AUTHENTICATED, RENDER JUST THE LANDING PAGE\n    return (\n      <div className=\"App\">\n        <div>\n          <Route exact path=\"/landing-page\"\n            render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/landing-page\" />\n          )} />\n\n          <Redirect from=\"*\" to=\"/landing-page\" />\n\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default App;\n// export default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nReactDOM.render(\n <BrowserRouter>   \n   <Switch>\n      <Route component={App} />\n   </Switch>\n </BrowserRouter>\n\n  , document.getElementById(\"root\"));\n\n"],"sourceRoot":""}