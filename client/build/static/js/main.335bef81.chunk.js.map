{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Form/Button.js","utils/API.js","pages/landing-page/landing-page.js","pages/create-questionnaire/create-questionnaire.js","pages/answer-questionnaire/answer-questionnaire.js","pages/view-questionnaire/view-questionnaire.js","pages/profile/profile.js","App.js","index.js"],"names":["Col","props","className","size","split","map","join","children","Container","id","fluid","Row","Input","formgroupclass","htmlFor","label","isvalid","fielderror","Button","axios","get","userObj","post","userData","questionData","organizationMongoID","questionnaireObj","console","log","questionnaireID","questionnaireData","mongoID","LandingPage","formatInput","event","attribute","target","getAttribute","setState","value","trim","handleFormSubmit","preventDefault","emailAddressValid","firstNameValid","lastNameValid","passwordValid","formErrors","firstName","lastName","emailAddress","password","validateFields","handleLoginButtonClick","loginOrCreateAccountButtonClicked","loginButtonClicked","forgotPasswordButtonClicked","serverErrorMessage","handleCreateAccountButtonClick","handleForgotPasswordButtonClick","state","redirectTo","successMessage","e","this","nextProps","fieldValidationErrors","RegExp","test","length","_login","saveUser","sendForgotPasswordEmail","error","email","API","then","response","data","userId","username","user_email","to","pathname","onBlur","bind","toString","errorClass","onChange","handleChange","name","type","onClick","Component","withRouter","CreateQuestionnairePage","delta","count","saveNewQuestionInDB","questionObj","questionID","questionnaireMongoID","questionText","questionTextInModal","errorResponse","questionDoc","_id","newMongoID","currentQuestionIndex","isCompleted","showModal","push","forceUpdate","updateQuestionInDB","selectedQuestion","updateOrCreateQuestion","questionTextValid","isNewQuestion","newQuestionData","closeModal","currentQuestionCommentInModal","questionStatusInModal","questionUserAssignedInModal","questionDescription","createNewQuestionButton","currentModalTitle","handleLogoutButtonClick","window","location","reload","swapRenderCompletedQuestions","showCompletedQuestions","swapRenderActiveQuestions","showActiveQuestions","isLogin","currentCompletedQuestionIndex","showModal2","filteredCompletedQuestionData","filteredQuestionData","users","text","userFilter","statusFilter","questionnaireNameInTitle","formSubmitButtonText","userFirstName","userLastName","isCurrentQuestionCompleted","questionnaireMongoDB","questions","questionArrayFromDB","questionnaireDoc","i","putAllQuestionsIntoFilteredArray","catch","err","questionClickedOn","questionMongoID","deletedQuestionDoc","deletedCount","index","indexOf","splice","adjustQuestionDataOrder","deleteQuestionInDB","questionnaireName","getQuestionsFromDB","question","assigneeFilterIsActive","statusFilterIsActive","status","userAssigned","scope","key","variant","editQuestionButton","deleteQuestionButton","Modal","show","animation","Header","Title","Body","Footer","AnswerQuestionnairePage","updateQuestionnaireInDB","answersArr","currentQuestion","answerHistory","questionAnswer","getQuestionnaireFromDB","match","params","answerHistoryQuestionnaire","answerKey","href","ViewQuestionnairePage","treeData","attributes","keyA","keyB","keyC","questinnaireMongoID","createDecisionTree","localAnswerHistoryQuestionnaire","probabilityData","currentID","questionCount","j","substring","hasOwnProperty","probabilityKeys","Object","keys","probabilityValues","values","treeChildrenObjArr","largestPossibleNumberOfQuestions","getLongestString","m","totalPossiblePathsWithCurrentQuestion","Math","pow","possiblePathsArr","howLargeTheStringOfPathsAre","n","stringInPossiblePathsArrExists","newPathAttempt","o","random","includes","correctPathCount","otherPathCount","y","x","newNode","ChoseThisPath","ChoseOtherPath","Probability","finalTreeData","currentObj","z","entries","result","d","item","forEach","_children","obj","res","recurse","current","undefined","level","val","setNest","arr","sort","a","b","reverse","style","width","height","orientation","Profile","handleChangePasswordButtonClick","setPasswordFieldsActiveInModal","updatePasswordInDB","oldPassword","newPassword","newPassword1","newPassword1and2","questionnaireIDValid","questionnaireNameValid","oldPasswordValid","newPassword1Valid","newPassword2Valid","questionnaireNameInModal","questionnaireIDInModal","newPassword2","handleCreateQuestionnaireButtonClick","setCreateQuestionnaireFieldsActiveInModal","setJoinQuestionnaireFieldsActiveInModal","setConfirmationBoxActiveInModal","handleJoinQuestionnaireButtonClick","handleSubmitButtonInModalClick","handleDeleteQuestionnaireInDB","currentQuestionnaire","loggedIn","setEditQuestionnaireFieldsActiveInModal","questionnaireMongoIDInModal","newPassword1And2Valid","questionnaires","getQuestionnairesOfUserInDB","attachUserToQuestionnaireInDB","saveQuestionnaireInDB","questionnaireClickedOn","questionnaire","isUserQuestionnaireOwner","userWhoCreatedOrgMongoID","userMongoID","questionnaireUsers","handleEditQuestionnaireButtonClick","handleDeleteOrLeaveButtonClick","App","user","loggedInSuccess","exact","render","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.335bef81.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = props =>\n  <div className={props.size.split(\" \").map(size => \"col-\" + size).join(\" \")} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Container = props =>\n  <div id={props.id} className={`container${props.fluid === \"true\"  ? \"-fluid\" : \"\"}`} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n//({ fluid, children, props })\nexport const Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}> \n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Input = props =>\n  <div className={props.formgroupclass}>\n\n    <label htmlFor=\"inputField\">{props.label}</label>\n    <input className=\"form-control\" id=\"inputField\" {...props} />\n    {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\n  </div>;\n","import React from \"react\";\n\nexport const Button = props =>\n  <button {...props} className=\"btn btn-pill btn-light btn-lg\">\n    {props.children}\n  </button>;\n","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    // USER CALLS TO DB -----\r\n    user: function () {\r\n        return axios.get(\"/api/user\");\r\n    },\r\n    sendForgotPasswordEmail(userObj) {\r\n        return axios.post(\"/api/user/sendForgotPasswordEmail\", userObj);\r\n    },\r\n    updateUserInDB(userObj){\r\n        return axios.post(\"/api/user/updateUser\", userObj);\r\n    },\r\n    login: function (userData) {\r\n        return axios.post(\"/api/user/login\", userData)\r\n    },\r\n    saveUser: function (userData) {\r\n        return axios.post(\"/api/user/saveUser\", userData);\r\n    },\r\n\r\n    //QUESTION CALLS TO DB --------\r\n    saveQuestion: function (questionData) {\r\n        return axios.post(\"/api/question/saveQuestion\", questionData);\r\n    },\r\n    updateQuestion: function (questionData) {\r\n        return axios.post(\"/api/question/updateQuestion\", questionData);\r\n    },\r\n    deleteQuestion: function (questionData) {\r\n        return axios.post(\"/api/question/deleteQuestion\", questionData);\r\n    },\r\n    getAllQuestions: function (organizationMongoID) {\r\n        return axios.get(\"/api/question/getAllQuestions/\" + organizationMongoID);\r\n    },\r\n    \r\n\r\n\r\n    // questionnaire CALLS TO DB ------\r\n    getQuestionnaireFromDB: function(questionnaireObj){\r\n        console.log(\"hi\");\r\n        console.log(questionnaireObj);\r\n        return axios.get(\"/api/questionnaire/getQuestionnaireFromDB/\" + questionnaireObj.questionnaireID);\r\n    },\r\n    saveQuestionnaireInDB: function(questionnaireData) {\r\n        return axios.post(\"/api/questionnaire/saveQuestionnaire\", questionnaireData);\r\n    },\r\n    getQuestionnairesOfUserInDB: function(userData){\r\n        console.log(\"i'm in API!!!\");\r\n        return axios.get(\"/api/questionnaire/getAllQuestionnairesOfUser/\" + userData.mongoID);\r\n    },\r\n    attachUserToQuestionnaireInDB: function (userData) {\r\n        return axios.post(\"/api/questionnaire/attachUserToQuestionnaire\", userData);\r\n    },\r\n    deleteQuestionnaireInDB: function(questionnaireData){\r\n        return axios.post(\"/api/questionnaire/deleteQuestionnaire\", questionnaireData);\r\n    },\r\n    updateQuestionnaireInDB: function(userData){\r\n        return axios.post(\"/api/questionnaire/updateQuestionnaire\", userData)\r\n    },\r\n    updateQuestionnaireAnswersInDB: function (userData) {\r\n        return axios.post(\"/api/questionnaire/updateQuestionnaireAnswers\", userData)\r\n    }\r\n\r\n};","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { withRouter } from 'react-router';\r\n\r\nimport \"./landing-page.css\";\r\nclass LandingPage extends Component {\r\n    constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        emailAddress: \"\",\r\n        password: \"\",\r\n        formErrors: {firstName: \"\", lastName: \"\", emailAddress:\"\", password:\"\"},\r\n          redirectTo: null,\r\n        firstNameValid: false,\r\n        lastNameValid: false,\r\n        passwordValid: false,\r\n        emailAddressValid: false,\r\n        loginOrCreateAccountButtonClicked: false,\r\n        loginButtonClicked: true,\r\n        forgotPasswordButtonClicked: false,\r\n        successMessage: \"\",\r\n        serverErrorMessage: \"\"\r\n    };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    } \r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ serverErrorMessage: this.props.serverErrorMessage });\r\n    }\r\n    //We use this method for validating all the fields.\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let emailAddressValid = this.state.emailAddressValid;\r\n        let firstNameValid = this.state.firstNameValid;\r\n        let lastNameValid = this.state.lastNameValid;\r\n        let passwordValid = this.state.passwordValid;\r\n\r\n        //Validating email using Regex\r\n        let regex = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\r\n         emailAddressValid = new RegExp(regex).test(this.state.emailAddress);\r\n        \r\n        fieldValidationErrors.emailAddress = emailAddressValid ? \"\" : \"Please provide a valid email\";\r\n\r\n        //Validating First Name by checking if there is anything there.\r\n        firstNameValid = this.state.firstName.length > 0;\r\n        fieldValidationErrors.firstName = firstNameValid ? \"\": \"Please provide your first name\";\r\n\r\n        //Validating Last Name by checking if there is anything there.\r\n        lastNameValid = this.state.lastName.length > 0;\r\n        fieldValidationErrors.lastName = lastNameValid ? \"\":\"Please provide your last name\";\r\n\r\n\r\n        if (!this.state.loginButtonClicked)\r\n        {\r\n        //validating password\r\n        passwordValid = this.state.password.length >= 6;\r\n        fieldValidationErrors.password = passwordValid ? \"\" : \"Please provide a password of atleast 8 characters\";\r\n        }\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            emailAddressValid: emailAddressValid,\r\n            firstNameValid: firstNameValid,\r\n            lastNameValid: lastNameValid,\r\n            passwordValid: passwordValid\r\n        }, () => {\r\n            if(this.state.loginButtonClicked && emailAddressValid){\r\n                //If the login button is clicked then we want submit LOGIN request, which is different than Create Account request\r\n                this.props._login(this.state.emailAddress, this.state.password);\r\n\r\n            }else if(this.state.loginOrCreateAccountButtonClicked && !this.state.loginButtonClicked && emailAddressValid && firstNameValid && lastNameValid && passwordValid){\r\n                //If Create Account button was clicked, then we want to post the user to the database.\r\n                this.saveUser();\r\n            }else if(this.state.forgotPasswordButtonClicked){\r\n                //If forgot password button was clicked.\r\n                this.sendForgotPasswordEmail();\r\n            }\r\n        });    \r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Below are all the button click methods - Just to set it up so before I actually submit data to DB ----------------------------------\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\" }\r\n        }, () => {\r\n                this.validateFields();\r\n        });\r\n\r\n    };\r\n\r\n    handleLoginButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: true, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }\r\n        })\r\n        \r\n    }\r\n    handleCreateAccountButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: true, loginButtonClicked: false, forgotPasswordButtonClicked: false,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n            formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage: \"\" }        \r\n        })\r\n    }\r\n\r\n    handleForgotPasswordButtonClick = event => {\r\n        event.preventDefault();\r\n        this.setState({ loginOrCreateAccountButtonClicked: false, loginButtonClicked: false, forgotPasswordButtonClicked: true,\r\n                        emailAddressValid: true, firstNameValid: true, lastNameValid: true, passwordValid: true,\r\n                        formErrors: { firstName: \"\", lastName: \"\", emailAddress: \"\", password: \"\", serverErrorMessage:\"\" }       \r\n        })\r\n    }\r\n    // END of BUTTON CLICK METHODS\r\n\r\n    //Handle the call to the DB for forgot password\r\n    sendForgotPasswordEmail() {\r\n        let userObj = {\r\n            email: this.state.emailAddress\r\n        }\r\n\r\n        API.sendForgotPasswordEmail(userObj)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    this.setState({ serverErrorMessage: \"An email has been sent.\"});\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error })\r\n                }\r\n            })\r\n    }\r\n\r\n    //Method when user wants to create account\r\n    saveUser() {\r\n            let userObj = {\r\n                userId: null,\r\n                username: this.state.emailAddress,\r\n                password: this.state.password,\r\n                email: this.state.emailAddress,\r\n                user_email: this.state.email,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName\r\n            }\r\n            API.saveUser(userObj)\r\n                .then(response => {\r\n\r\n\r\n\r\n                    if (!response.data.error) {\r\n                        //Now that the user account is created, let's automatically login the user in\r\n                         this.props._login(this.state.emailAddress, this.state.password, userObj);\r\n\r\n        \r\n                    } else {\r\n                        //Usually this happens when an email address was already used.\r\n                        this.setState({ serverErrorMessage: response.data.error })\r\n                    }\r\n                })\r\n\r\n    }\r\n    render() {\r\n\r\n        if (this.props.redirectTo) {\r\n            return <Redirect to={{ pathname: this.props.redirectTo }} />\r\n        } else {\r\n        return (\r\n            <Container id=\"container\" fluid=\"true\">\r\n\r\n                <Row id=\"mainRow\">\r\n\r\n                    <hr id=\"hline\"></hr>\r\n                    <Col id=\"formCol\" size=\"sm-6\">\r\n                        <h1 id=\"loginTitle\">Decision Tree Questionnaire Maker</h1>\r\n                        {this.state.loginOrCreateAccountButtonClicked ?\r\n                            <div>\r\n                                {this.state.loginButtonClicked ?\r\n                                    <h3 id=\"formHeader\">Login</h3>\r\n                                    :\r\n                                    <h3 id=\"formHeader\">Create Account</h3>\r\n\r\n                                }\r\n                                <form>\r\n                                    \r\n\r\n                                    {this.state.loginButtonClicked ?\r\n\r\n                                        \"\"\r\n                                        :\r\n\r\n                                        <div>\r\n                                           \r\n                                            <Input label=\"First Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.firstNameValid.toString()} fielderror={this.state.formErrors.firstName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.firstName)}`} value={this.state.firstName} id=\"firstName\" onChange={this.handleChange.bind(this)} name=\"firstName\"></Input>\r\n\r\n\r\n                                    \r\n                                            <Input label=\"Last Name\" onBlur={this.formatInput.bind(this)} isvalid={this.state.lastNameValid.toString()} fielderror={this.state.formErrors.lastName} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.lastName)}`} value={this.state.lastName} id=\"lastName\" onChange={this.handleChange.bind(this)} name=\"lastName\"></Input>\r\n\r\n                                        </div>\r\n\r\n                                    }\r\n\r\n                               \r\n                                    <Input label=\"Email Address\" onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n\r\n                              \r\n                                    <Input label=\"Password\" type=\"password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.passwordValid.toString()} fielderror={this.state.formErrors.password} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.password)}`} value={this.state.password} id=\"password\" onChange={this.handleChange.bind(this)} name=\"password\"></Input>\r\n\r\n                                    <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n\r\n                                    {this.state.loginButtonClicked ?\r\n                                        <div>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" \r\n                                            onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                        <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</h3>\r\n                                        </div>\r\n\r\n                                    }\r\n                                </form>\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                                <br />\r\n                            </div>\r\n                            : \r\n\r\n                            <div>\r\n\r\n                                {\r\n                                    this.state.forgotPasswordButtonClicked ?\r\n                                        <div>\r\n\r\n                                            <p><strong>Please enter your email address. If correct, we will send you an email!</strong></p>\r\n                                            <p>Email Address</p>\r\n                                            <Input onBlur={this.formatInput.bind(this)} isvalid={this.state.emailAddressValid.toString()} fielderror={this.state.formErrors.emailAddress} formgroupclass={`form-group ${this.errorClass(this.state.formErrors.emailAddress)}`} value={this.state.emailAddress} id=\"emailAddress\" onChange={this.handleChange.bind(this)} name=\"emailAddress\"></Input>\r\n                                            <Button onClick={this.handleFormSubmit.bind(this)}> Submit </Button>\r\n                                            \r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleLoginButtonClick.bind(this)}>Login instead?</h3>\r\n                                            <h3 id=\"formFooterLink\" className=\"formFooterLink\" onClick={this.handleCreateAccountButtonClick.bind(this)}>Create Account instead?</h3>\r\n                                        </div>\r\n                                            :                                                                                \r\n                                             <div>                                \r\n                                            <Button onClick={this.handleLoginButtonClick.bind(this)}> Login </Button>\r\n                                            <Button onClick={this.handleCreateAccountButtonClick.bind(this)}> Create Account </Button>\r\n                                            <Button onClick={this.handleForgotPasswordButtonClick.bind(this)}>Forgot Password?</Button>      \r\n                                            </div>\r\n\r\n\r\n                                }\r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n\r\n                            </div>\r\n                              \r\n                        }\r\n                        \r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n                }\r\n    \r\n            }\r\n}\r\n\r\n// export default LandingPage;\r\nexport default withRouter(LandingPage)\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\n// import \"./create-questionnaire.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass CreateQuestionnairePage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formErrors: { questionText: \"\" },\r\n            questionTextValid: false,\r\n            isLogin: true,\r\n            isNewQuestion: false,\r\n            selectedQuestion: \"\",\r\n            currentModalTitle: \"Edit Question\",\r\n            currentQuestionIndex: 0,\r\n            currentCompletedQuestionIndex: 0,\r\n            showModal: false,\r\n            showModal2: false,\r\n            questionData: [],\r\n            filteredCompletedQuestionData: [],\r\n            filteredQuestionData: [],\r\n            users: [{ text: 'Tyler', id: '1' }, { text: 'Tawny', id: '2' }, { text: 'Anthony', id: '3' }, { text: 'Arthur', id: '4' }],\r\n            currentQuestionCommentInModal: \"\",\r\n            questionTextInModal: \"\",\r\n            questionStatusInModal: \"\",\r\n            questionUserAssignedInModal: \"\",\r\n            userFilter: \"\",\r\n            statusFilter: \"\",\r\n            questionnaireMongoID: \"\",\r\n            questionnaireNameInTitle: \"\",\r\n            formSubmitButtonText: \"Submit\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            showActiveQuestions: true,\r\n            showCompletedQuestions: false,\r\n            isCurrentQuestionCompleted: false\r\n        };\r\n\r\n    }\r\n\r\n    delta = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n    //This method will handle all the form validation\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let questionTextValid = this.state.questionTextValid;\r\n\r\n\r\n        questionTextValid = this.state.questionTextInModal.length > 0;\r\n        fieldValidationErrors.questionText = questionTextValid ? \"\" : \"Please add Question Text.\";\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            questionTextValid: questionTextValid\r\n        }, () => {\r\n            this.updateOrCreateQuestion();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n\r\n    //************************** DB METHODS ************** THESE METHODS SAVE, EDIT, GET BUGS FROM DB *******************************************\r\n    saveNewQuestionInDB = () => {\r\n\r\n        var questionObj = {\r\n            questionID: this.state.questionData.length,\r\n            questionnaireMongoID: this.state.questionnaireMongoID,\r\n            questionText: this.state.questionTextInModal,\r\n        }\r\n\r\n        API.saveQuestion(questionObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    questionObj.mongoID = response.data.questionDoc._id;\r\n                    questionObj.newMongoID = response.data.questionDoc._id;\r\n                    questionObj.id = this.state.currentQuestionIndex;\r\n                    questionObj.isCompleted = response.data.isCompleted;\r\n\r\n                    this.setState({ showModal: false });\r\n                    this.state.questionData.push(questionObj);\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n    updateQuestionInDB = () => {\r\n        API.updateQuestion(this.state.selectedQuestion)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    this.setState({ showModal: false });\r\n\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    getQuestionsFromDB() {\r\n        console.log(\"I'm in getQuestions from DB  --- \" + this.state.questionnaireMongoDB);\r\n        API.getAllQuestions(this.state.questionnaireMongoID)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    var questions = [];\r\n                    var questionArrayFromDB = response.data.questionnaireDoc.questions;\r\n                    //Loop through question data received from the server.\r\n                    for (var i = 0; i < questionArrayFromDB.length; i++) {\r\n                        questions.push({\r\n                            mongoID: questionArrayFromDB[i]._id,\r\n                            id: this.state.currentQuestionIndex,\r\n                            questionText: questionArrayFromDB[i].questionText,\r\n                        })\r\n\r\n                        this.setState({ currentQuestionIndex: this.state.currentQuestionIndex + 1 });\r\n\r\n                    }\r\n\r\n                    this.setState({ questionData: questions });\r\n                    this.forceUpdate();\r\n\r\n                    //At default, we want to show all questions in the table\r\n                    this.putAllQuestionsIntoFilteredArray();\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    deleteQuestionInDB(questionClickedOn) {\r\n        questionClickedOn.questionMongoID = questionClickedOn.mongoID;\r\n        questionClickedOn.questionnaireMongoID = this.state.questionnaireMongoID;\r\n        API.deleteQuestion(questionClickedOn)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n\r\n                    if (response.data.deletedQuestionDoc.deletedCount > 0) {\r\n                        //Removing the question from the UI\r\n                        const index = this.state.questionData.indexOf(questionClickedOn);\r\n                        if (index > -1) {\r\n                            this.state.questionData.splice(index, 1);\r\n                        }\r\n                        this.adjustQuestionDataOrder();\r\n                    }\r\n\r\n                    this.forceUpdate();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updateOrCreateQuestion = () => {\r\n        if (!this.state.questionTextValid) {\r\n            return;\r\n        }\r\n        if (this.state.isNewQuestion) {\r\n            this.saveNewQuestionInDB();\r\n        } else {\r\n            var newQuestionData = this.state.questionData;\r\n            //UPDATE THE BUG DATA LOCALLY BEFORE PUSHING TO DB\r\n            newQuestionData[this.state.currentQuestionIndex].questionText = this.state.questionTextInModal;\r\n\r\n            this.setState({ selectedQuestion: this.state.questionData[this.state.currentQuestionIndex], questionData: newQuestionData });\r\n            this.updateQuestionInDB();\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        this.setState({\r\n            showModal: false, questionTextInModal: \"\", currentQuestionCommentInModal: \"\",\r\n            questionStatusInModal: \"\", questionUserAssignedInModal: \"\", formErrors: { questionDescription: \"\" }\r\n        });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n\r\n    // ******************** THESE METHODS ARE CALLED WHEN CREATE/EDIT BUTTONS ARE FIRST CLICKED ******************\r\n    editQuestionButton(questionClickedOn) {\r\n        this.adjustQuestionDataOrder()\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Edit Question\",\r\n            currentQuestionIndex: questionClickedOn.id,\r\n            questionTextInModal: questionClickedOn.questionText,\r\n            isNewQuestion: false,\r\n            selectedQuestion: questionClickedOn\r\n        });\r\n    }\r\n    deleteQuestionButton(questionClickedOn) {\r\n        this.deleteQuestionInDB(questionClickedOn);\r\n    }\r\n\r\n    createNewQuestionButton = () => {\r\n        this.setState({ showModal: true, currentModalTitle: \"Create Question\", isNewQuestion: true, questionTextInModal: \"\"});\r\n    }\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    // ******************** END OF INITIAL BUTTON CLICK METHODS ******************\r\n\r\n\r\n\r\n    //CALLS THIS WHEN THE COMPONENT MOUNTS, basically \"on page load\"\r\n    componentDidMount() {\r\n        // var questionnaireUsersArray = [];\r\n        // for (var i = 0; i < this.props.location.state.questionnaireUsers.length; i++) {\r\n        //     questionnaireUsersArray.push(\r\n        //         {\r\n        //             text: this.props.location.state.questionnaireUsers[i],\r\n        //             id: i\r\n        //         }\r\n        //     )\r\n        // }\r\n        //Grab props that were set from profile page and set them to state for easier access.\r\n        this.setState({\r\n            questionnaireMongoID: this.props.location.state.questionnaireMongoID, questionnaireNameInTitle: this.props.location.state.questionnaireName,\r\n            userFirstName: this.props.location.state.userFirstName, userLastName: this.props.location.state.userLastName\r\n        }, () => {\r\n             this.getQuestionsFromDB();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    putAllQuestionsIntoFilteredArray() {\r\n        this.setState({ filteredQuestionData: [] });\r\n        this.state.questionData.map(question => {\r\n            return this.state.filteredQuestionData.push(question);\r\n        });\r\n    }\r\n    adjustQuestionDataOrder() {\r\n        //Update the current page's id of the question for UI purposes\r\n        for (var i = 0; i < this.state.questionData.length; i++) {\r\n            this.state.questionData[i].id = i;\r\n        }\r\n    }\r\n\r\n    //If you click \"Show Completed Questions\" or \"Hide Completed Questions\", this will show or hide.\r\n    swapRenderCompletedQuestions = () => {\r\n        if (this.state.showCompletedQuestions) {\r\n            this.setState({ showCompletedQuestions: false })\r\n        } else {\r\n            this.setState({ showCompletedQuestions: true })\r\n        }\r\n\r\n    }\r\n    //If you click \"Show Active Questions\" or \"Hide Active Questions\", this will show or hide.\r\n    swapRenderActiveQuestions = () => {\r\n        if (this.state.showActiveQuestions) {\r\n            this.setState({ showActiveQuestions: false })\r\n        } else {\r\n            this.setState({ showActiveQuestions: true })\r\n        }\r\n    }\r\n\r\n    //Flip the value of \"isCompleted\" for the question\r\n    completedCheck(question) {\r\n        if (question.isCompleted) {\r\n            question.isCompleted = false;\r\n        } else {\r\n            question.isCompleted = true;\r\n        }\r\n\r\n        this.setState({ selectedQuestion: question }, () => {\r\n            this.updateQuestionInDB();\r\n            this.forceUpdate();\r\n        });\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n\r\n        //FIRST WE FILTER THE NON COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\") {\r\n            this.state.filteredQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n\r\n                var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n                if (this.state.statusFilter === question.status && this.state.statusFilter !== \"\") {\r\n\r\n                    statusFilterIsActive = true;\r\n                }\r\n                if (this.state.userFilter === question.userAssigned && this.state.userFilter !== \"\") {\r\n                    assigneeFilterIsActive = true;\r\n                }\r\n                if (statusFilterIsActive && assigneeFilterIsActive && !question.isCompleted) {\r\n                    return this.state.filteredQuestionData.push(question);\r\n                } else if (statusFilterIsActive && this.state.userFilter === \"\" && !question.isCompleted) {\r\n\r\n                    return this.state.filteredQuestionData.push(question);\r\n                }\r\n                else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && !question.isCompleted) {\r\n                    return this.state.filteredQuestionData.push(question);\r\n                }\r\n            });\r\n        } else {\r\n            this.state.filteredQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n                if (!question.isCompleted) {\r\n                    return this.state.filteredQuestionData.push(question);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        // NOW WE WILL DO THE SAME LOGIC FOR COMPLETED BUGS\r\n        if (this.state.userFilter !== \"\" || this.state.statusFilter !== \"\") {\r\n            this.state.filteredCompletedQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n\r\n                var assigneeFilterIsActive = false;\r\n                var statusFilterIsActive = false;\r\n                //APPLY THE FILTERS\r\n                if (this.state.statusFilter === question.status && this.state.statusFilter !== \"\") {\r\n\r\n                    statusFilterIsActive = true;\r\n                }\r\n                if (this.state.userFilter === question.userAssigned && this.state.userFilter !== \"\") {\r\n                    assigneeFilterIsActive = true;\r\n                }\r\n                if (statusFilterIsActive && assigneeFilterIsActive && question.isCompleted) {\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                } else if (statusFilterIsActive && this.state.userFilter === \"\" && question.isCompleted) {\r\n\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                }\r\n                else if (assigneeFilterIsActive && this.state.statusFilter === \"\" && question.isCompleted) {\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                }\r\n            });\r\n        } else {\r\n            this.state.filteredCompletedQuestionData = [];\r\n            this.state.questionData.map(question => {\r\n                if (question.isCompleted) {\r\n                    return this.state.filteredCompletedQuestionData.push(question);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n        return (\r\n            <Container id=\"containerViewQuestions\" fluid=\"true\">\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 QuestiontrackerTitle\" id=\"questionnaireTitle\">{this.state.questionnaireNameInTitle}</h1>\r\n                                <h2 className=\"display-4 QuestionTrackerTitle\">Edit Questions</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <Row>\r\n                            <Col size=\"sm-2\">\r\n                                <Link to=\"/profile\" className=\"log\" ><Button>View Profile</Button></Link>\r\n                            </Col>\r\n                            <Col size=\"sm-2\">\r\n                                <Button type=\"button\" className=\"btn btn-primary\" onClick={this.createNewQuestionButton}>Create New Question</Button>\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        {this.state.showActiveQuestions ?\r\n                            <div>\r\n                                <h1 className=\"activeQuestionsTitle\">Active Questions</h1>\r\n                                {this.state.questionData.length ? (\r\n                                    <table id=\"questionViewTable_Table\" className=\"table table-hover questionViewTable_Table\">\r\n                                        <thead id=\"questionViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\">Question</th>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\"></th>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\"></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredQuestionData.map(question => {\r\n                                                return (\r\n                                                    <tr className=\"questionViewTable_tr\" key={question.mongoID}>\r\n                                                        <td id=\"titleColumn\" className=\"questionViewTable_td\">{question.questionText}</td>\r\n                                                        <td id=\"editColumn\" className=\"questionViewTable_td\">\r\n                                                            <Button variant=\"primary\" onClick={() => this.editQuestionButton(question)}>\r\n                                                                Edit\r\n                                                                        </Button>\r\n                                                        </td>\r\n                                                        <td id=\"deleteColumn\" className=\"questionViewTable_td\"> <Button variant=\"primary\" onClick={() => this.deleteQuestionButton(question)}>Delete</Button></td>\r\n                                                    </tr>\r\n                                                )\r\n\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)}\r\n                            </div>\r\n\r\n\r\n\r\n                            :\r\n\r\n\r\n                            \"\"\r\n                        }\r\n\r\n\r\n                        <br />\r\n                        <br />\r\n\r\n\r\n\r\n\r\n                        {/* This modal will pop up for editing questions! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Button className='btn btn-danger note-delete xButton' id=\"questionModalXButton\" onClick={() => this.closeModal()}>X</Button>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <br />\r\n\r\n                                <Input label=\"Enter your question below:\" onBlur={this.formatInput.bind(this)} value={this.state.questionTextInModal} id=\"questionTextInModal\" onChange={this.handleChange.bind(this)} name=\"questionTextInModal\" />\r\n\r\n\r\n\r\n\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"primary\" onClick={this.handleFormSubmit}>\r\n                                    Submit\r\n                              </Button>\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateQuestionnairePage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\n// import \"./create-questionnaire.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass AnswerQuestionnairePage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            questionnaireID: this.props.match.params.questionnaireID,\r\n            questionnaireName: \"\",\r\n            test:\"\",\r\n            questions: [],\r\n            answerHistoryQuestionnaire:[],\r\n            errorResponse: null\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuestionnaireFromDB();\r\n    }\r\n\r\n    getQuestionnaireFromDB() {\r\n\r\n            let questionnaireObj = {\r\n                questionnaireID: this.state.questionnaireID\r\n            }\r\n\r\n        API.getQuestionnaireFromDB(questionnaireObj)\r\n                .then(response => {\r\n\r\n                    if (!response.data.error) {\r\n                        //If we find no error, then we successful got the user's list of questionnaires. Update state with questionnaires.\r\n                        console.log(\"I got questionnaire back from DB!\");\r\n                        console.log(response);\r\n\r\n                        if(response.data.questions !== null){\r\n                            for(var i=0; i<response.data.questions.length; i++){\r\n                                var answerKey = {  }\r\n                                answerKey[\"answer\"+response.data.questions[i].questionID] = \"\"\r\n                                this.setState(answerKey)\r\n                            }\r\n                            console.log(response.data);\r\n                            this.setState({\r\n                                questionnaireData: response.data,\r\n                                questionnaireName: response.data.name,\r\n                                answerHistoryQuestionnaire: response.data.answerHistoryQuestionnaire,\r\n                                questions: response.data.questions\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n  \r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }   \r\n    //This method will handle all the form validation\r\n    //TODO\r\n    validateFields() {\r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    updateQuestionnaireInDB = () => {\r\n\r\n        console.log(\"UPDATE QUESTIONS!!\");\r\n\r\n        var answersArr = [];\r\n        for(var i=0; i<this.state.questionnaireData.questions.length; i++){\r\n            var currentQuestion = this.state.questionnaireData.questions[i];\r\n            //Adding to the history of answers for a specific question!\r\n            currentQuestion.answerHistory.push(this.state[\"answer\"+currentQuestion.questionID]);\r\n            answersArr.push({\r\n                questionText: this.state.questionnaireData.questions[i].questionText,\r\n                questionAnswer: this.state[\"answer\" + currentQuestion.questionID],\r\n                questionMongoID: this.state.questionnaireData.questions[i]._id,\r\n                questionID: this.state.questionnaireData.questions[i].questionID\r\n            })\r\n        }\r\n        this.state.questionnaireData[\"isFromAnswerQuestionnaire\"] = true;\r\n        this.state.questionnaireData[\"questionnaireMongoID\"] = this.state.questionnaireData._id;\r\n        this.state.questionnaireData[\"questionnaireName\"] = this.state.questionnaireData.name;\r\n        this.state.questionnaireData[\"answerHistoryQuestionnaire\"] = { answersArr };\r\n        console.log(this.state.questionnaireData);\r\n        API.updateQuestionnaireAnswersInDB(this.state.questionnaireData)\r\n            .then(response => {\r\n                console.log(response);\r\n                if (response.data) {\r\n                    if(response.data.error){\r\n                        return;\r\n                    }\r\n                    // this.setState({ \r\n                    //     questionnaireData: response.data,\r\n                    //     questionnaireName: response.data.name,\r\n                    //     questions: response.data.questions\r\n                    // });\r\n                    this.getQuestionnaireFromDB();\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container id=\"containerViewQuestions\" fluid=\"true\">\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <h1>{this.state.questionnaireName}</h1>\r\n                        </div>\r\n                        <br />\r\n                        {this.state.questions ? \r\n                        \r\n                        <div>\r\n                            <form>\r\n                                    {this.state.questions.map((question, i) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <h3>{question.questionText}</h3>\r\n                                            <select key={i} value={this.state[\"answer\"+question.questionID]} onChange={this.handleChange.bind(this)} id={\"answer\" + question.questionID} name={\"answer\" + question.questionID}>\r\n                                            <option className=\"dropdown-item\" href=\"#\" value=\"\"></option>\r\n                                            <option className=\"dropdown-item\" href=\"#\" value=\"Yes\">Yes</option>\r\n                                            <option className=\"dropdown-item\" href=\"#\" value=\"No\">No</option>       \r\n                                            </select> \r\n                                        </div>\r\n                                    )\r\n                                })} \r\n                            </form>\r\n                                <Button type=\"button\" className=\"btn btn-primary\" onClick={this.updateQuestionnaireInDB}>Submit</Button>\r\n                        </div>\r\n                        \r\n                        : \"\"}\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default AnswerQuestionnairePage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\n// import \"./create-questionnaire.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Tree from 'react-d3-tree';\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n\r\nclass ViewQuestionnairePage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formErrors: { questionText: \"\" },\r\n            questionTextValid: false,\r\n            isLogin: true,\r\n            isNewQuestion: false,\r\n            selectedQuestion: \"\",\r\n            currentModalTitle: \"View Question\",\r\n            currentQuestionIndex: 0,\r\n            currentCompletedQuestionIndex: 0,\r\n            showModal: false,\r\n            showModal2: false,\r\n            questionData: [],\r\n            filteredCompletedQuestionData: [],\r\n            filteredQuestionData: [],\r\n            users: [{ text: 'Tyler', id: '1' }, { text: 'Tawny', id: '2' }, { text: 'Anthony', id: '3' }, { text: 'Arthur', id: '4' }],\r\n            currentQuestionCommentInModal: \"\",\r\n            questionTextInModal: \"\",\r\n            questionStatusInModal: \"\",\r\n            questionUserAssignedInModal: \"\",\r\n            userFilter: \"\",\r\n            statusFilter: \"\",\r\n            questionnaireMongoID: \"\",\r\n            questionnaireNameInTitle: \"\",\r\n            formSubmitButtonText: \"Submit\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            showActiveQuestions: true,\r\n            showCompletedQuestions: false,\r\n            isCurrentQuestionCompleted: false,\r\n            treeData: [\r\n                {\r\n                    name: 'Top Level',\r\n                    attributes: {\r\n                        keyA: 'val A',\r\n                        keyB: 'val B',\r\n                        keyC: 'val C',\r\n                    },\r\n                    children: [\r\n                        {\r\n                            name: 'Level 2: A',\r\n                            attributes: {\r\n                                keyA: 'val A',\r\n                                keyB: 'val B',\r\n                                keyC: 'val C',\r\n                            },\r\n                            children: [{\r\n                                name: 'Level 3: A',\r\n                                attributes: {\r\n                                    keyA: 'val A',\r\n                                    keyB: 'val B',\r\n                                    keyC: 'val C',\r\n                                }\r\n                            },\r\n                             {\r\n                                    name: 'Level 3: A',\r\n                                    attributes: {\r\n                                        keyA: 'val A',\r\n                                        keyB: 'val B',\r\n                                        keyC: 'val C',\r\n                                    }\r\n                            },\r\n                        ]\r\n                        },\r\n                        {\r\n                            name: 'Level 2: B',\r\n                            attributes: {\r\n                                keyA: 'val A',\r\n                                keyB: 'val B',\r\n                                keyC: 'val C',\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            ]\r\n        };\r\n\r\n    }\r\n\r\n    delta = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n    //This method will handle all the form validation\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let questionTextValid = this.state.questionTextValid;\r\n\r\n\r\n        questionTextValid = this.state.questionTextInModal.length > 0;\r\n        fieldValidationErrors.questionText = questionTextValid ? \"\" : \"Please add Question Text.\";\r\n\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            questionTextValid: questionTextValid\r\n        }, () => {\r\n            this.closeModal();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //Here we check if the field has an error. If it does, it will add the \"has-error\" class to the field.\r\n    //\"has-error\" is a default bootstrap class that will nicely color the outline of the field red to indicate an error for the user. \r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n    };\r\n\r\n\r\n    //************************** DB METHODS ************** THESE METHODS SAVE, EDIT, GET BUGS FROM DB *******************************************\r\n\r\n    getQuestionsFromDB() {\r\n        console.log(\"I'm in getQuestions from DB  --- \" + this.state.questinnaireMongoID);\r\n        API.getAllQuestions(this.state.questionnaireMongoID)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    var questions = [];\r\n                    var questionArrayFromDB = response.data.questionnaireDoc.questions;\r\n                    console.log(\"QUESTIONS CAME IN!\");\r\n                    console.log(questionArrayFromDB);\r\n                    //Loop through question data received from the server.\r\n                    for (var i = 0; i < questionArrayFromDB.length; i++) {\r\n                        questions.push({\r\n                            mongoID: questionArrayFromDB[i]._id,\r\n                            id: this.state.currentQuestionIndex,\r\n                            questionText: questionArrayFromDB[i].questionText,\r\n                        })\r\n\r\n                        this.setState({ currentQuestionIndex: this.state.currentQuestionIndex + 1 });\r\n\r\n                    }\r\n\r\n                    this.setState({ questionData: questions });\r\n                    this.forceUpdate();\r\n\r\n                    //At default, we want to show all questions in the table\r\n                    this.putAllQuestionsIntoFilteredArray();\r\n                    this.forceUpdate();\r\n\r\n                    //Lastly, we create our decision tree!\r\n                    this.createDecisionTree(response.data.questionnaireDoc.answerHistoryQuestionnaire);\r\n\r\n                } else {\r\n                    this.setState({ errorResponse: response })\r\n                }\r\n            }).catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    createDecisionTree(localAnswerHistoryQuestionnaire) {\r\n\r\n    \r\n    var newTreeData = [\r\n             {\r\n            //     name: 'Top Level',\r\n            //     attributes: {\r\n            //         keyA: 'val A',\r\n            //         keyB: 'val B',\r\n            //         keyC: 'val C',\r\n            //     },\r\n            //     children: [\r\n            //         {\r\n            //             name: 'Level 2: A',\r\n            //             attributes: {\r\n            //                 keyA: 'val A',\r\n            //                 keyB: 'val B',\r\n            //                 keyC: 'val C',\r\n            //             },\r\n            //         },\r\n            //         {\r\n            //             name: 'Level 2: B',\r\n            //         },\r\n            //     ],\r\n             }\r\n        ]\r\n\r\n      if(!localAnswerHistoryQuestionnaire){\r\n          return;\r\n      }\r\n      var probabilityData = {};\r\n        var currentID = \"\";\r\n        for (var i = 0; i < localAnswerHistoryQuestionnaire.length; i++) {\r\n            var questionCount = 0;\r\n            for (var j = 0; j < localAnswerHistoryQuestionnaire[i].answersArr.length; j++){\r\n                currentID += (questionCount + localAnswerHistoryQuestionnaire[i].answersArr[j].questionAnswer.substring(0, 1))\r\n                questionCount += 1;\r\n            }\r\n\r\n            //Add currentID to ProbabilityData, and then data to grab the next currentID\r\n            if (probabilityData.hasOwnProperty(currentID)) {\r\n                probabilityData[currentID].count += 1;\r\n                currentID = \"\";\r\n                questionCount = 1;\r\n            } else {\r\n                probabilityData[currentID] = {\r\n                     count: 1,\r\n                }\r\n                currentID = \"\";\r\n                questionCount = 1;\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        //Now that we have counts of all the registration paths taken, we want to loop through the keys and values and add approbability probability for EACH question.\r\n\r\n        var probabilityKeys = Object.keys(probabilityData);\r\n        var probabilityValues = Object.values(probabilityData);\r\n        var currentYesCount = 0;\r\n\r\n        var currentYesAndNoCount = 0;\r\n\r\n        var treeChildrenObjArr = [];\r\n        //Grab the largest path of questions \r\n        var largestPathTaken = this.getLongestString(probabilityKeys);\r\n\r\n        var largestPossibleNumberOfQuestions = largestPathTaken.length/2;\r\n        if(largestPossibleNumberOfQuestions<1){\r\n            largestPossibleNumberOfQuestions = 1;\r\n        }\r\n\r\n        //Iterate for EACH qestion will have ATLEAST one node in the tree\r\n        for (var m = 0; m < largestPossibleNumberOfQuestions+1; m++){\r\n\r\n            var totalPossiblePathsWithCurrentQuestion = Math.pow(2, m);\r\n            var possiblePathsArr = [];\r\n            var yes = true;\r\n            var howLargeTheStringOfPathsAre = m;\r\n            if (totalPossiblePathsWithCurrentQuestion !== 1) {\r\n            //FOR EACH NODE OF THE SAME QUESTION, N IS THE CURRENT CURRENT PATH\r\n                for(var n=0; n<totalPossiblePathsWithCurrentQuestion; n++){\r\n                    var stringInPossiblePathsArrExists = true;\r\n                    while(stringInPossiblePathsArrExists){\r\n                        var newPathAttempt = \"\";\r\n                        //ADD EVERY PREVIOUS CHOICE OF CURRENT PATH\r\n                        for (var o = 0; o < howLargeTheStringOfPathsAre; o++) {\r\n                            if (Math.random() < 0.5) {\r\n                                newPathAttempt += o + \"Y\";\r\n                            } else {\r\n                                newPathAttempt += o + \"N\";\r\n                            }\r\n                        }\r\n                    if (!possiblePathsArr.includes(newPathAttempt)) {\r\n                        //THIS PATH DOESNT EXIST, SUCCESSFUL CREATION OF PATH\r\n                        possiblePathsArr.push(newPathAttempt);\r\n                        stringInPossiblePathsArrExists = false;\r\n                    }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n               console.log(possiblePathsArr); \r\n               //NOW WE HAVE EACH POSSIBLE PATH FOR THE CURRENT QUESTION NOW WE COUNT\r\n             //LOOP THROUGH EACH POSSIBLE KEY TO ADD THE YES, NO COUNT FOR CURRENT QUESTION\r\n                var correctPathCount = 0;\r\n                var otherPathCount = 0;\r\n                for(var y=0; y<possiblePathsArr.length; y++){\r\n                    for (var x = 0; x < probabilityKeys.length; x++) {\r\n                        if (probabilityKeys[x].includes(possiblePathsArr[y])) {\r\n                            correctPathCount += probabilityValues[x].count;\r\n                        } else {\r\n                            otherPathCount += probabilityValues[x].count;\r\n                        }\r\n                    } \r\n                    //NOW THAT WE HAVE ALL THE COUNTS WE WANT TO EDIT THE TREE\r\n                 var newNode = {\r\n                     name: \"test\",\r\n                    attributes: {\r\n                            ChoseThisPath: correctPathCount,\r\n                            ChoseOtherPath: otherPathCount,\r\n                            Probability: correctPathCount / (correctPathCount + otherPathCount) * 100 + \"%\",\r\n                        },\r\n                        children: [\r\n\r\n                        ],\r\n                    };\r\n\r\n                    treeChildrenObjArr.push(newNode); \r\n\r\n                }\r\n                \r\n\r\n        }\r\n\r\n        //NOW WE WANT TO LOOP THROUGH EVERY CHILD AND ADD THE PROPER CHILD\r\n        var finalTreeData = [\r\n            {\r\n                name: \"Test\",\r\n                attributes: {\r\n                    },\r\n                children: [\r\n                    ],\r\n            }\r\n        ]\r\n\r\n        var currentObj = finalTreeData[0];\r\n\r\n        var childrenCount =1;\r\n\r\n        var currentObjIndex = 0;\r\n        var numberOfNestedChildren = treeChildrenObjArr.length / 2;\r\n        //var childrenString = \"finalTreeData['children']\"\r\n        for (var z = 0; z < treeChildrenObjArr.length; z++){\r\n            //finalTreeData['children'] = treeChildrenObjArr[z];\r\n            var arrFromObj = Object.entries(currentObj);\r\n            var result = {};\r\n            var temp = result;\r\n   \r\n            temp = temp[\"children\"] = [treeChildrenObjArr[z]];\r\n            currentObjIndex += 1;\r\n\r\n\r\n            finalTreeData[0].children = result;\r\n\r\n\r\n            //newObj.push(treeChildrenObjArr[z])\r\n            //childrenCount += 1;\r\n            // if(childrenCount === 2) {\r\n            //     //arrFromObj[currentObjIndex][1].push(treeChildrenObjArr[z]);\r\n            //     currentObjIndex += 1;\r\n            // } else {\r\n            //     //arrFromObj[currentObjIndex].push(treeChildrenObjArr[z])\r\n            // }\r\n            //HOW MANY CHILDREN THERE ARE IN THIS OBJECT\r\n        }\r\n        console.log(finalTreeData);\r\n\r\n        this.setState({\r\n            treeData: finalTreeData\r\n        })\r\n\r\n\r\n    }\r\n\r\n    addNewNode(d, item) {\r\n    item.forEach(function (i) {\r\n        if (d._children)\r\n            d._children.push(i)//will add child to the closed node      \r\n        else\r\n            d.children.push(i)//will add child to expanded node.\r\n    })\r\n}\r\n\r\n    nestedLoop(obj) {\r\n    const res = {};\r\n    function recurse(obj, current) {\r\n        for (const key in obj) {\r\n            let value = obj[key];\r\n            if (value != undefined) {\r\n                if (value && typeof value === 'object') {\r\n                    recurse(value, key);\r\n                } else {\r\n                    // Do your stuff here to var value\r\n                    res[key] = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    recurse(obj);\r\n    return res;\r\n    }\r\n\r\n    setNest(obj, level, val) {\r\n    if (level > 0) {\r\n        this.setNest(obj['children'], level - 1, val);\r\n    }\r\n    else {\r\n        obj.children = val;\r\n    }\r\n    }\r\n\r\n   getLongestString(arr) { let longestStringArr = arr.sort((a, b) => a.length - b.length).reverse(); return longestStringArr[0]; }\r\n\r\n    closeModal = () => {\r\n        this.setState({\r\n            showModal: false, questionTextInModal: \"\", currentQuestionCommentInModal: \"\",\r\n            questionStatusInModal: \"\", questionUserAssignedInModal: \"\", formErrors: { questionDescription: \"\" }\r\n        });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n\r\n    // ******************** THESE METHODS ARE CALLED WHEN CREATE/EDIT BUTTONS ARE FIRST CLICKED ******************\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    // ******************** END OF INITIAL BUTTON CLICK METHODS ******************\r\n\r\n\r\n\r\n    //CALLS THIS WHEN THE COMPONENT MOUNTS, basically \"on page load\"\r\n    componentDidMount() {\r\n        this.setState({\r\n            questionnaireMongoID: this.props.location.state.questionnaireMongoID, questionnaireNameInTitle: this.props.location.state.questionnaireName,\r\n            userFirstName: this.props.location.state.userFirstName, userLastName: this.props.location.state.userLastName\r\n        }, () => {\r\n            this.getQuestionsFromDB();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    putAllQuestionsIntoFilteredArray() {\r\n        this.setState({ filteredQuestionData: [] });\r\n        this.state.questionData.map(question => {\r\n            return this.state.filteredQuestionData.push(question);\r\n        });\r\n    }\r\n    adjustQuestionDataOrder() {\r\n        //Update the current page's id of the question for UI purposes\r\n        for (var i = 0; i < this.state.questionData.length; i++) {\r\n            this.state.questionData[i].id = i;\r\n        }\r\n    }\r\n\r\n    //If you click \"Show Completed Questions\" or \"Hide Completed Questions\", this will show or hide.\r\n    swapRenderCompletedQuestions = () => {\r\n        if (this.state.showCompletedQuestions) {\r\n            this.setState({ showCompletedQuestions: false })\r\n        } else {\r\n            this.setState({ showCompletedQuestions: true })\r\n        }\r\n\r\n    }\r\n    //If you click \"Show Active Questions\" or \"Hide Active Questions\", this will show or hide.\r\n    swapRenderActiveQuestions = () => {\r\n        if (this.state.showActiveQuestions) {\r\n            this.setState({ showActiveQuestions: false })\r\n        } else {\r\n            this.setState({ showActiveQuestions: true })\r\n        }\r\n    }\r\n\r\n    //Flip the value of \"isCompleted\" for the question\r\n    completedCheck(question) {\r\n        if (question.isCompleted) {\r\n            question.isCompleted = false;\r\n        } else {\r\n            question.isCompleted = true;\r\n        }\r\n\r\n        this.setState({ selectedQuestion: question }, () => {\r\n            this.updateQuestionInDB();\r\n            this.forceUpdate();\r\n        });\r\n\r\n    }\r\n    \r\n    render() {\r\n\r\n\r\n        return (\r\n            <Container id=\"containerViewQuestions\" fluid=\"true\">\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 QuestiontrackerTitle\" id=\"questionnaireTitle\">{this.state.questionnaireNameInTitle}</h1>\r\n                                <h2 className=\"display-4 QuestionTrackerTitle\">View Questions</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <Row>\r\n                            <Col size=\"sm-2\">\r\n                                <Link to=\"/profile\" className=\"log\" ><Button>View Profile</Button></Link>\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        <div id=\"treeWrapper\" style={{ width: '100em', height: '50em' }}>\r\n\r\n                            <Tree data={this.state.treeData} orientation=\"vertical\"/>\r\n\r\n                        </div>\r\n\r\n                        {this.state.showActiveQuestions ?\r\n                            <div>\r\n                                <h1 className=\"activeQuestionsTitle\">Active Questions</h1>\r\n                                {this.state.questionData.length ? (\r\n                                    <table id=\"questionViewTable_Table\" className=\"table table-hover questionViewTable_Table\">\r\n                                        <thead id=\"questionViewTable_head\" className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th className=\"questionViewTable_th\" scope=\"col\">Question</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.filteredQuestionData.map(question => {\r\n                                                return (\r\n                                                    <tr className=\"questionViewTable_tr\" key={question.mongoID}>\r\n                                                        <td id=\"titleColumn\" className=\"questionViewTable_td\">{question.questionText}</td>\r\n                                                    </tr>\r\n                                                )\r\n\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n\r\n                                ) : (<h3 className=\"noResultsMessage\"> No Results to Display </h3>)}\r\n                            </div>\r\n\r\n\r\n\r\n                            :\r\n\r\n\r\n                            \"\"\r\n                        }\r\n\r\n\r\n                        <br />\r\n                        <br />\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ViewQuestionnairePage;\r\n","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport \"./profile.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from 'react-router';\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName:\"\",\r\n            loggedIn: this.props.loggedIn,\r\n            redirectTo: null,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            setEditQuestionnaireFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            formErrors: { oldPassword: \"\", newPassword1and2:\"\", questionnaireName:\"\", questionnaireID:\"\" },\r\n            oldPassword: \"\",\r\n            newPassword1: \"\",\r\n            newPassword2: \"\",\r\n            questionnaireNameInModal: \"\",\r\n            questionnaireIDInModal: \"\",\r\n            questionnaireMongoIDInModal: \"\",\r\n            oldPasswordValid: true,\r\n            newPassword1And2Valid: false,\r\n            questionnaireNameValid: false,\r\n            questionnaireIDValid: false,\r\n            showModal: false,\r\n            formSubmitButtonText: \"Submit\",\r\n            successMessage: \"\",\r\n            serverErrorMessage:\"\",\r\n            currentModalTitle: \"\",\r\n            userFirstName: \"\",\r\n            userLastName: \"\",\r\n            userData: [],\r\n            questionnaires: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ userFirstName: this.props.firstName, userLastName: this.props.lastName});\r\n        this.getQuestionnairesOfUserInDB();\r\n        \r\n    }\r\n\r\n    //This is used onBlur in order to trim the values. \r\n    formatInput = (event) => {\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({ [attribute]: event.target.value.trim() })\r\n    }\r\n\r\n    //Standard method for constantly updating input, since UI is constantly refreshing\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    errorClass(error) {\r\n        return (error.length === 0 ? \"\" : \"has-error\");\r\n    }\r\n\r\n    validateFields() {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let newPassword1And2Valid = this.state.newPassword1And2Valid;\r\n        let questionnaireNameValid =  this.state.questionnaireNameValid;\r\n        let questionnaireIDValid = this.state.questionnaireIDValid;\r\n\r\n        //Validating between the new password field and \"confirm password\" field that they match and are greather than or equal to 6 characters\r\n        newPassword1And2Valid = (this.state.newPassword1 === this.state.newPassword2) && this.state.newPassword1.length >= 6;\r\n        fieldValidationErrors.newPassword1and2 = \"New password doesn't match or your password is less than 8 characters long.\";\r\n\r\n        //Validating that questionnaire is greater than 3 characters\r\n        questionnaireNameValid = this.state.questionnaireNameInModal.length >= 3;\r\n        fieldValidationErrors.questionnaireName = \"Questionnaire Name must have atleast three characters.\";\r\n\r\n        //Validating that questionnaire ID is greater than 6 characters\r\n        questionnaireIDValid = this.state.questionnaireIDInModal.length >= 6;\r\n        fieldValidationErrors.questionnaireID = \"Questionnaire ID must have atleast six characters.\";\r\n\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            newPassword1And2Valid: newPassword1And2Valid,\r\n            questionnaireIDValid: questionnaireIDValid,\r\n            questionnaireNameValid: questionnaireNameValid\r\n        }, () => {\r\n                if (this.state.setJoinQuestionnaireFieldsActiveInModal) {\r\n                    //for JOIN questionnaire\r\n                    if (questionnaireIDValid){\r\n                     this.attachUserToQuestionnaireInDB();\r\n                    }\r\n                } else if (this.state.setCreateQuestionnaireFieldsActiveInModal) {\r\n                    //For CREATE questionnaire\r\n                    if(questionnaireNameValid && questionnaireIDValid){\r\n                        this.saveQuestionnaireInDB();\r\n                    }\r\n                } else if (this.state.setEditQuestionnaireFieldsActiveInModal) {\r\n                    //For UPDATE Questionnaire\r\n                    if(questionnaireNameValid && questionnaireIDValid){\r\n\r\n                        this.updateQuestionnaireInDB();\r\n                    }\r\n                } else if (this.state.setPasswordFieldsActiveInModal) {\r\n                    //For UPDATE password\r\n                    if (newPassword1And2Valid){     \r\n                        this.updatePasswordInDB();\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    \r\n    handleChangePasswordButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Change Password\",\r\n            setPasswordFieldsActiveInModal: true\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    //************************THESE METHODS ARE CALLED FROM BUTTONS WITHIN THE MODAL*********************\r\n    updatePasswordInDB = () => {\r\n\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n        API.updateUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.setState({ successMessage: \"Successfully updated password.\"})\r\n                    this.closeModal();\r\n\r\n                } else {\r\n                    this.setState({ serverErrorMessage: response.data.error, formErrors: { oldPassword: \"\", newPassword1and2: \"\", questionnaireName: \"\", questionnaireID: \"\", serverErrorMessage: \"\" }})\r\n                }\r\n            })\r\n        \r\n    }\r\n    closeModal = () => {\r\n        //Reset all the fields so they don't show up again when you try to open the modal again.\r\n        this.setState({ showModal: false, questionnaireIDValid: true,\r\n        questionnaireNameValid: true, oldPasswordValid: true, newPassword1Valid: true, newPassword2Valid: true,\r\n            questionnaireNameInModal: \"\", questionnaireIDInModal: \"\", oldPassword: \"\", newPassword: \"\", newPassword2: \"\", serverErrorMessage:\"\",\r\n            formErrors: { oldPassword: \"\", newPassword1and2: \"\", questionnaireName: \"\", questionnaireID: \"\", serverErrorMessage: \"\", formSubmitButtonText: \"Submit\" } });\r\n    }\r\n    //*********************** END OF MODAL BUTTON CLICK METHODS ****************************\r\n\r\n    //*************************METHODS BELOW RELATED TO ORGANIZATION BUTTON CLICKS ******************/\r\n    handleEditQuestionnaireButtonClick(questionnaireClickedOn) {\r\n        //event.preventDefault();\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Edit Questionnaire\",\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setEditQuestionnaireFieldsActiveInModal: true,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            setPasswordFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            questionnaireMongoIDInModal: questionnaireClickedOn._id,\r\n            questionnaireNameInModal: questionnaireClickedOn.name,\r\n            questionnaireIDInModal: questionnaireClickedOn.questionnaireID\r\n        });\r\n    }\r\n\r\n    handleCreateQuestionnaireButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Create Questionnaire\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: true,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            questionnaireIDInModal: \"\",\r\n            questionnaireNameInModal: \"\"\r\n        });\r\n\r\n    }\r\n\r\n    handleJoinQuestionnaireButtonClick = event => {\r\n        this.setState({\r\n            showModal: true,\r\n            currentModalTitle: \"Join Questionnaire\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setConfirmationBoxActiveInModal: false,\r\n            successMessage: \"\",\r\n            setJoinQuestionnaireFieldsActiveInModal: true\r\n        })\r\n\r\n    }\r\n    handleDeleteOrLeaveButtonClick(questionnaire) {\r\n        this.setState({ setConfirmationBoxActiveInModal: true, showModal: true, currentQuestionnaire: questionnaire,\r\n            currentModalTitle: \"\",\r\n            setPasswordFieldsActiveInModal: false,\r\n            setCreateQuestionnaireFieldsActiveInModal: false,\r\n            setJoinQuestionnaireFieldsActiveInModal: false,\r\n            formSubmitButtonText: \"Confirm\",\r\n            successMessage: \"\",\r\n            questionnaireIDInModal: \"\",\r\n            questionnaireNameInModal: \"\"    \r\n        });\r\n    }\r\n\r\n    //*** METHODS BELOW RELATED TO DB WITH ORGANIZATIONS */ */\r\n    saveQuestionnaireInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            questionnaireName: this.state.questionnaireNameInModal,\r\n            questionnaireID: this.state.questionnaireIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.saveQuestionnaireInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getQuestionnairesOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({serverErrorMessage: response.data.error})\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    getQuestionnairesOfUserInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID\r\n        }\r\n\r\n        API.getQuestionnairesOfUserInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of questionnaires. Update state with questionnaires.\r\n                    console.log(\"I got questionnaires back from DB!\");\r\n                    console.log(response);\r\n                    this.setState({\r\n                        questionnaires: response.data.questionnaires,\r\n                    })\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    attachUserToQuestionnaireInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            questionnaireID: this.state.questionnaireIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n        API.attachUserToQuestionnaireInDB(userObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    //If we find no error, then we successful got the user's list of questionnaires. Update state with questionnaires.\r\n                    this.setState({\r\n                        questionnaires: response.data.questionnaires,\r\n                        successMessage: \"You successfully joined the questionnaire!\"\r\n                    })\r\n                    this.closeModal();\r\n                    this.getQuestionnairesOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                } else {\r\n                    //Now we set the error message in the modal.\r\n                    this.setState({ serverErrorMessage: response.data.error });\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleDeleteQuestionnaireInDB(questionnaireClickedOn) {\r\n        var isUserQuestionnaireOwner = false;\r\n        if (this.props.mongoID === questionnaireClickedOn.userWhoCreatedOrgMongoID){\r\n            isUserQuestionnaireOwner = true;\r\n        }\r\n        var questionnaireObj = {\r\n            questionnaireMongoID: questionnaireClickedOn._id,\r\n            userMongoID: this.props.mongoID,\r\n            questionnaireData: questionnaireClickedOn,\r\n            isUserQuestionnaireOwner: isUserQuestionnaireOwner,\r\n            userFirstName: this.state.userFirstName,\r\n            userLastName: this.state.userLastName\r\n        }\r\n        API.deleteQuestionnaireInDB(questionnaireObj)\r\n            .then(res => {\r\n                this.setState({currentQuestionnaire: \"\"});\r\n                this.getQuestionnairesOfUserInDB();\r\n                this.forceUpdate();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    updateQuestionnaireInDB() {\r\n        let userObj = {\r\n            password: this.state.oldPassword,\r\n            newPassword: this.state.newPassword1,\r\n            username: this.props.username,\r\n            mongoID: this.props.mongoID,\r\n            questionnaireMongoID: this.state.questionnaireMongoIDInModal,\r\n            questionnaireName: this.state.questionnaireNameInModal,\r\n            questionnaireID: this.state.questionnaireIDInModal,\r\n            userFirstName: this.props.firstName,\r\n            userLastName: this.props.lastName\r\n        }\r\n\r\n        API.updateQuestionnaireInDB(userObj)\r\n            .then(response => {\r\n                //If not error from server\r\n                if (!response.data.error) {\r\n                    this.closeModal();\r\n                    this.getQuestionnairesOfUserInDB();\r\n                    this.forceUpdate();\r\n\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleSubmitButtonInModalClick = () => {\r\n        if(this.state.setConfirmationBoxActiveInModal){\r\n            //In this case we are confirming to delete or leave an questionnaire.\r\n            this.setState({setConfirmationBoxActiveInModal: false, showModal: false}, () => {\r\n                    this.handleDeleteQuestionnaireInDB(this.state.currentQuestionnaire);\r\n            }\r\n            )\r\n        }else {\r\n            this.validateFields();\r\n        }\r\n    }\r\n\r\n    handleLogoutButtonClick = () => {\r\n        window.location.reload(false);\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <Container id=\"containerViewQuestions\" fluid=\"true\">\r\n\r\n                <Link to={{ pathname: \"/landing-page\", state: { userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"logoutButton\"><Button id=\"logoutButton\" onClick={this.handleLogoutButtonClick.bind(this)}>Logout</Button> </Link>\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\">\r\n                        <div className=\"jumbotron jumbotron-fluid\">\r\n                            <Container id=\"container\" fluid=\"true\">\r\n                                <h1 className=\"display-4 QuestionTrackerTitle\">Welcome, {this.props.firstName}!</h1>\r\n                                <h2 className=\"display-4 QuestionTrackerTitle\" id=\"successMessage\">{this.state.successMessage}</h2>\r\n                            </Container>\r\n                        </div>\r\n                        <Button onClick={this.handleChangePasswordButtonClick.bind(this)}>Change Password</Button>\r\n                        <Button onClick={this.handleCreateQuestionnaireButtonClick.bind(this)}>Create Questionnaire</Button>\r\n                        <Button onClick={this.handleJoinQuestionnaireButtonClick.bind(this)}>Answer Questionnaire</Button>\r\n                        <br />\r\n                        <br />\r\n                        {this.state.questionnaires.length > 0 ? (\r\n                            <table id=\"questionnaireTable_Table\" className=\"table table-hover questionViewTable_Table\">\r\n                                <thead id=\"questionnaireTable_head\" className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\">Name</th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\">Questionnaire ID</th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                        <th className=\"questionnaireTable_th\" scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.questionnaires.map(questionnaire => {\r\n                                        return (\r\n                                            <tr className=\"questionnaireTable_tr\" key={questionnaire._id}>\r\n                                                <td id=\"questionnaireNameColumn\" className=\"questionnaireTable_td\">{questionnaire.name}</td>\r\n                                                <td id=\"questionnaireIDColumn\" className=\"questionnaireTable_td\">{questionnaire.questionnaireID}</td>\r\n                                                <td id=\"viewQuestionColumn\" className=\"questionnaireTable_td\">\r\n                                                    \r\n                                                    <Link to={{pathname: \"/create-questionnaire\", state: {questionnaireMongoID: questionnaire._id, questionnaireName: questionnaire.name, questionnaireUsers: questionnaire.users, userFirstName: this.state.userFirstName, userLastName: this.state.userLastName}}} className=\"log\" ><Button>Edit Questions</Button></Link>\r\n                                                    </td>\r\n                                                <td id=\"viewQuestionColumn\" className=\"questionnaireTable_td\">\r\n\r\n                                                    <Link to={{ pathname: \"/view-questionnaire\", state: { questionnaireMongoID: questionnaire._id, questionnaireName: questionnaire.name, questionnaireUsers: questionnaire.users, userFirstName: this.state.userFirstName, userLastName: this.state.userLastName } }} className=\"log\" ><Button>View Questionnaire Decision Tree</Button></Link>\r\n                                                </td>\r\n                                                <td id=\"editColumn\" className=\"questionnaireTable_td\">\r\n                                                    {this.props.mongoID === questionnaire.userWhoCreatedOrgMongoID ?\r\n                                                        <Button variant=\"primary\" onClick={() => this.handleEditQuestionnaireButtonClick(questionnaire)}>\r\n                                                            Edit Questionnaire\r\n                                                        </Button> : \"\"\r\n\r\n                                                    }\r\n                                                </td>\r\n                                                <td id=\"deleteColumn\" className=\"questionnaireTable_td\">\r\n                                                    {this.props.mongoID === questionnaire.userWhoCreatedOrgMongoID ?\r\n\r\n                                                        < Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(questionnaire)}>Delete</Button> \r\n                                                        : \r\n                                                        <Button variant=\"primary\" onClick={() => this.handleDeleteOrLeaveButtonClick(questionnaire)}>Leave</Button> \r\n                                                    }\r\n                                                     </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n\r\n                        ) : (<h3 id=\"noResultsHeader\"> No Results to Display </h3>)}\r\n                        <br />\r\n                        <br />\r\n\r\n                        {/* This modal will pop up for changing password! */}\r\n                        <Modal show={this.state.showModal} animation={false}>\r\n                            <Modal.Header>\r\n                                <Modal.Title><h3>{this.state.currentModalTitle}</h3></Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                {this.state.setConfirmationBoxActiveInModal ?\r\n                                    <h1 id=\"confirmationHeader\">Are you sure?</h1>   \r\n                                :\r\n                                    <div>\r\n                                        {this.state.setPasswordFieldsActiveInModal ?\r\n                                            <div>\r\n                                                <Input type=\"password\" label=\"Old Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.oldPasswordValid.toString()}\r\n                                                    fielderror={this.state.formErrors.oldPassword}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.oldPassword)}`}\r\n                                                    value={this.state.oldPassword}\r\n                                                    id=\"oldPassword\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"oldPassword\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"New Password\" onBlur={this.formatInput.bind(this)}\r\n                                                    isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword1and2}\r\n                                                    id=\"newPassword1\" onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword1\"></Input>\r\n\r\n                                                <Input type=\"password\" label=\"Confirm New Password\" onBlur={this.formatInput.bind(this)} isvalid={this.state.newPassword1And2Valid.toString()}\r\n                                                    fielderror={this.state.formErrors.newPassword1and2}\r\n                                                    formgroupclass={`form-group ${this.errorClass(this.state.formErrors.newPassword1and2)}`}\r\n                                                    value={this.state.newPassword2}\r\n                                                    id=\"newPassword2\"\r\n                                                    onChange={this.handleChange.bind(this)}\r\n                                                    name=\"newPassword2\"></Input>\r\n\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                {this.state.setJoinQuestionnaireFieldsActiveInModal ?\r\n                                                    <div>\r\n                                                        <Input label=\"Please enter the Questionnaire ID of the questionnaire you wish to join:\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.questionnaireIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.questionnaireID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.questionnaireID)}`}\r\n                                                            value={this.state.questionnaireIDInModal}\r\n                                                            id=\"questionnaireIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"questionnaireIDInModal\"></Input>\r\n\r\n                                                    </div>\r\n                                                    :\r\n                                                    <div>\r\n                                                        <Input label=\"Questionnaire Name\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.questionnaireNameValid.toString()}\r\n                                                            fielderror={this.state.formErrors.questionnaireName}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.questionnaireName)}`}\r\n                                                            value={this.state.questionnaireNameInModal}\r\n                                                            id=\"questionnaireNameInModal\"\r\n                                                            onChange={this.handleChange.bind(this)}\r\n                                                            name=\"questionnaireNameInModal\"></Input>\r\n\r\n                                                        <Input label=\"Questionnaire ID (Use this ID to invite people)\" onBlur={this.formatInput.bind(this)}\r\n                                                            isvalid={this.state.questionnaireIDValid.toString()}\r\n                                                            fielderror={this.state.formErrors.questionnaireID}\r\n                                                            formgroupclass={`form-group ${this.errorClass(this.state.formErrors.questionnaireID)}`}\r\n                                                            value={this.state.questionnaireIDInModal}\r\n                                                            id=\"questionnaireIDInModal\" onChange={this.handleChange.bind(this)}\r\n                                                            name=\"questionnaireIDInModal\"></Input>\r\n                                                    </div>\r\n\r\n                                                }\r\n\r\n                                            </div>\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                }\r\n                        \r\n                                <span className=\"help-block serverErrorMessage\">{this.state.serverErrorMessage}</span>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                                    Cancel\r\n                                  </Button>\r\n                                <Button variant=\"primary\" onClick={this.handleSubmitButtonInModalClick.bind(this)}>\r\n                                {this.state.formSubmitButtonText}\r\n                                </Button>\r\n\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n\r\n    \r\n}\r\n}\r\n\r\n// export default Profile;\r\nexport default withRouter(Profile);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"./pages/landing-page\";\nimport CreateQuestionnairePage from \"./pages/create-questionnaire\";\nimport AnswerQuestionnairePage from \"./pages/answer-questionnaire\";\nimport ViewQuestionnairePage from \"./pages/view-questionnaire\";\nimport Profile from \"./pages/profile\";\nimport API from \"./utils/API\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      loggedIn: false,\n      user: null,\n      userId: null,\n      firstName: null,\n      lastName: null,\n      mongoID: null,\n      password: null,\n      redirectTo: null,\n      serverErrorMessage: \"\"\n    }\n    this._login = this._login.bind(this)\n  }\n  componentDidMount() {\n    API.user().then(response => {\n      if (!!response.data.user) {\n        this.setState({\n          loggedIn: true,\n          userId: response.data.user._id,\n        });\n      } else {\n        this.setState({\n          loggedIn: false,\n          // redirectTo: \"/landing-page\",\n          user: null\n        })\n      }\n    })\n  }\n\n  _login(username, password) {\n    var userData = {\n      username: username,\n      password: password,\n    }\n    API\n      .login(userData)\n      .then(response => {\n        if (response.status === 200) {\n          if (response.data.loggedInSuccess) {\n            // update the state\n            this.setState({\n              loggedIn: true,\n              // user: response.data.user,\n              // userId: response.data.user._id,\n              username: response.data.username,\n              mongoID: response.data.mongoID,\n              firstName: response.data.firstName,\n              lastName: response.data.lastName,\n              password: response.data.password,\n              redirectTo: \"/profile\"\n            })\n            //this.props.history.push(\"/profile\");\n\n\n          } else {\n            this.setState({\n              loggedIn: false,\n              serverErrorMessage: response.data.error\n            }, () => {\n              this.forceUpdate();\n            })\n\n          }\n        }\n      })\n  }\n\n  render() {\n    //IF USER IS AUTHENTICATED RENDER THIS\n    if (this.state.loggedIn) {\n      return (\n\n        <div className=\"App\">\n          <div>\n\n            <Redirect exact to={{ pathname: this.state.redirectTo }} render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n\n            <Route exact path=\"/landing-page\"\n              render={() =>\n                <LandingPage\n                  _login={this._login}\n                  serverErrorMessage={this.state.serverErrorMessage}\n                />} />\n            <Route exact path=\"/create-questionnaire\" component={CreateQuestionnairePage} />\n            <Route exact path=\"/view-questionnaire\" component={ViewQuestionnairePage} />\n            <Route exact path=\"/profile\" render={() => <Profile loggedIn={this.state.loggedIn} username={this.state.username} mongoID={this.state.mongoID} firstName={this.state.firstName} lastName={this.state.lastName} />} />\n\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/landing-page\" />\n            )} />\n\n          </div>\n        </div>\n\n      )\n    }\n\n\n    //IF USER IS NOT AUTHENTICATED, RENDER JUST THE LANDING PAGE\n    return (\n      <div className=\"App\">\n        <div>\n          <Route exact path=\"/landing-page\"\n            render={() =>\n              <LandingPage\n                _login={this._login}\n                serverErrorMessage={this.state.serverErrorMessage}\n              />} />\n\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/landing-page\" />\n          )} />\n\n          <Route exact path=\"/answer-questionnaire/:questionnaireID\" render={(props) => (\n            <AnswerQuestionnairePage {...props}></AnswerQuestionnairePage>\n          )} />\n\n          {/* <Redirect from=\"*\" to=\"/landing-page\" /> */}\n\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nReactDOM.render(\n <BrowserRouter>   \n   <Switch>\n      <Route component={App} />\n   </Switch>\n </BrowserRouter>\n\n  , document.getElementById(\"root\"));\n\n"],"sourceRoot":""}